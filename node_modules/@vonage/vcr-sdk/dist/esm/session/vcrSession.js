var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { EventEmitter } from "../providers/events/eventEmitter.js";
import { LogContext } from "../providers/logger/contracts/logContext.js";
import { Logger } from "../providers/logger/logger.js";
import { LOG_LEVEL } from "../providers/logger/enums/logLevel.js";
import { WrappedCallback } from "./contracts/wrappedCallback.js";
import { DATA_TYPE } from "../request/enums/dataType.js";
var VCRSession = /** @class */ (function () {
    function VCRSession(bridge, config, jwt, id) {
        this.bridge = bridge;
        this.config = config;
        this.jwt = jwt;
        this.id = id;
        this.eventEmitter = new EventEmitter(this);
        this.logger = new Logger(this);
    }
    VCRSession.prototype.emitSessionCreatedEvent = function (ttl) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.eventEmitter.emitSessionCreatedEvent(ttl)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    VCRSession.prototype.createUUID = function () {
        return this.bridge.uuid();
    };
    VCRSession.prototype.getToken = function () {
        return this.jwt.getToken();
    };
    VCRSession.prototype.log = function (level, message, context) {
        if (context === void 0) { context = null; }
        if (this.config.logsSubmission == false) {
            this.bridge.log("Skipping sending logs as config.logsSubmission is set to false");
        }
        else if (this.bridge.getEnv("SKIP_LOGS_SUBMISSION") == "true") {
            this.bridge.log("Skipping sending logs as SKIP_LOGS_SUBMISSION is set to true");
        }
        else {
            this.bridge.runBackgroundTask(this.logger.log(level, message, context));
        }
    };
    VCRSession.prototype.wrapCallback = function (route, filters) {
        var wrappedCallback = new WrappedCallback();
        wrappedCallback.filters = filters;
        wrappedCallback.id = this.createUUID();
        wrappedCallback.instanceServiceName = this.config.instanceServiceName;
        wrappedCallback.sessionId = this.id;
        wrappedCallback.instanceId = this.config.instanceId;
        wrappedCallback.path = route;
        return wrappedCallback;
    };
    VCRSession.prototype.constructCommandHeaders = function () {
        var headers = {};
        headers["traceId"] = this.createUUID();
        headers["instanceId"] = this.config.instanceId;
        headers["sessionId"] = this.id;
        headers["apiAccountId"] = this.config.apiAccountId;
        headers["apiApplicationId"] = this.config.apiApplicationId;
        headers["applicationName"] = this.config.instanceServiceName;
        headers["applicationId"] = this.config.applicationId;
        return headers;
    };
    VCRSession.prototype.constructRequestHeaders = function () {
        var headers = {};
        headers["X-Neru-SessionId"] = this.id;
        headers["X-Neru-ApiAccountId"] = this.config.apiAccountId;
        headers["X-Neru-ApiApplicationId"] = this.config.apiApplicationId;
        headers["X-Neru-InstanceId"] = this.config.instanceId;
        headers["X-Neru-TraceId"] = this.bridge.uuid();
        headers["Content-Type"] = "application/json";
        var token = this.getToken();
        if (token != null) {
            headers["Authorization"] = "Bearer ".concat(token);
        }
        return headers;
    };
    VCRSession.prototype.request = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var result, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.bridge.request(params)];
                    case 1:
                        result = _a.sent();
                        if (params.responseType == "stream" /* RESPONSE_TYPE.STREAM */) {
                            this.logStreamResponse(params);
                        }
                        else if (params.dataType == DATA_TYPE.FORM_DATA) {
                            this.logFormData(params, result);
                        }
                        else {
                            this.logResponse(params, result);
                        }
                        return [2 /*return*/, result];
                    case 2:
                        e_1 = _a.sent();
                        this.logError(params, this.bridge.getErrorMessage(e_1));
                        throw e_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    VCRSession.prototype.logStreamResponse = function (params) {
        var context = new LogContext(params.url, null, "Stream response received");
        this.log(LOG_LEVEL.INFO, "Sending ".concat(params.method, " to ").concat(params.url), context);
    };
    VCRSession.prototype.logFormData = function (params, result) {
        var context = new LogContext(params.url, "form-data is sent", this.bridge.jsonStringify(result));
        this.log(LOG_LEVEL.INFO, "Sending ".concat(params.method, " to ").concat(params.url), context);
    };
    VCRSession.prototype.logResponse = function (params, result) {
        var context = new LogContext(params.url, this.bridge.jsonStringify(params.data), this.bridge.jsonStringify(result));
        this.log(LOG_LEVEL.INFO, "Sending ".concat(params.method, " to ").concat(params.url), context);
    };
    VCRSession.prototype.logError = function (params, message) {
        var context = new LogContext(params.url, this.bridge.jsonStringify(params.data), message);
        this.log(LOG_LEVEL.ERROR, "Error while sending a ".concat(params.method, " request to ").concat(params.url), context);
    };
    return VCRSession;
}());
export { VCRSession };
//# sourceMappingURL=vcrSession.js.map