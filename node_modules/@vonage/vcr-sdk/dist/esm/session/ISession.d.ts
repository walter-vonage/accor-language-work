import { IBridge } from "../IBridge.js";
import { ILogContext } from "../providers/logger/contracts/ILogContext.js";
import { IConfig } from "../services/config/IConfig.js";
import { IFilter } from "./contracts/IFilter.js";
import { WrappedCallback } from "./contracts/wrappedCallback.js";
import { IRequestParams } from "../request/contracts/IRequestParams.js";
import { IJWT } from "../services/jwt/IJwt.js";
export interface ISession {
    jwt: IJWT;
    bridge: IBridge;
    config: IConfig;
    id: string;
    createUUID(): string;
    getToken(): string;
    log(level: string, message: string, context: ILogContext): void;
    wrapCallback(route: string, filters: IFilter[]): WrappedCallback;
    constructCommandHeaders(): Record<string, string>;
    constructRequestHeaders(): Record<string, string>;
    request<T, K>(params: IRequestParams<T>): Promise<K>;
}
//# sourceMappingURL=ISession.d.ts.map