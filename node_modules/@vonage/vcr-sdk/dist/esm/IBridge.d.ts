import { IRequestParams } from "./request/contracts/IRequestParams.js";
import { PathObject } from "./services/config/pathObject.js";
import { ISdkError } from "./errors/ISdkError.js";
export interface IBridge {
    createSdkError(message: string): ISdkError;
    getErrorMessage<T>(error: T): string;
    encodeUriComponent(s: string): string;
    parsePath(path: string): PathObject;
    testRegEx(str: string, regExp: string): boolean;
    isInteger(value: number): boolean;
    substring(str: string, start: number, end?: number): string;
    jsonStringify(data: any): string;
    jsonParse<T>(json: string): T;
    getEnv(name: string): string;
    request<T, K>(params: IRequestParams<T>): Promise<K>;
    requestWithoutResponse<T>(params: IRequestParams<T>): Promise<void>;
    uuid(): string;
    isoDate(): string;
    runBackgroundTask(task: any): void;
    createReadStream(path: string): any;
    toISOString(seconds: number): string;
    jwtSign(payload: any, privateKey: string, alg: string, options?: any): string;
    jwtVerify<T>(token: string, privateKey: string, algorithm: string): T;
    jwtDecode<T>(token: string): T;
    getSystemTime(): number;
    log(data: any): void;
    getObjectKeys<T>(obj: T): string[];
}
//# sourceMappingURL=IBridge.d.ts.map