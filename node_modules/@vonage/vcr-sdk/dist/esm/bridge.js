var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import axios from "axios";
import Agent from "agentkeepalive";
import jwt from "jsonwebtoken";
import { v4 as uuid } from "uuid";
import * as fs from "fs";
import { parse as pathParse } from "path";
import FormData from "form-data";
var SdkError = /** @class */ (function (_super) {
    __extends(SdkError, _super);
    function SdkError(message) {
        var _this = _super.call(this, message) || this;
        _this.name = _this.constructor.name;
        Error.captureStackTrace(_this, _this.constructor);
        return _this;
    }
    return SdkError;
}(Error));
var Bridge = /** @class */ (function () {
    function Bridge() {
        this.configureHttp();
    }
    Bridge.prototype.createSdkError = function (message) {
        return new SdkError(message);
    };
    Bridge.prototype.getErrorMessage = function (error) {
        if (error instanceof Error) {
            return error.message;
        }
        throw this.createSdkError("bridge.getErrorMessage: Invalid error type was provided");
    };
    Bridge.prototype.encodeUriComponent = function (s) {
        return encodeURIComponent(s);
    };
    Bridge.prototype.parsePath = function (path) {
        return pathParse(path);
    };
    Bridge.prototype.configureHttp = function () {
        axios.defaults.httpAgent = new Agent({
            maxSockets: 100,
            maxFreeSockets: 10,
            timeout: 60000,
            freeSocketTimeout: 30000,
        });
        axios.defaults.httpsAgent = new Agent.HttpsAgent({
            maxSockets: 100,
            maxFreeSockets: 10,
            timeout: 60000,
            freeSocketTimeout: 30000,
        });
    };
    Bridge.prototype.testRegEx = function (str, regExp) {
        return new RegExp(regExp).test(str);
    };
    Bridge.prototype.isInteger = function (value) {
        return Number.isInteger(value);
    };
    Bridge.prototype.substring = function (str, start, end) {
        if (end === void 0) { end = null; }
        if (end == null) {
            return str.substring(start);
        }
        return str.substring(start, end);
    };
    Bridge.prototype.getObjectKeys = function (obj) {
        return Object.keys(obj);
    };
    Bridge.prototype.jsonStringify = function (value) {
        return JSON.stringify(value);
    };
    Bridge.prototype.jsonParse = function (json) {
        return JSON.parse(json);
    };
    Bridge.prototype.getEnv = function (name) {
        return process.env[name];
    };
    Bridge.prototype.log = function (data) {
        console.log(data);
    };
    Bridge.prototype.runBackgroundTask = function (task) { };
    Bridge.prototype.createReadStream = function (path) {
        return fs.createReadStream(path);
    };
    Bridge.prototype.constructFormData = function (data) {
        var formData = new FormData();
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var item = data_1[_i];
            if (item.filename != null) {
                formData.append(item.name, item.value, item.filename);
            }
            else {
                formData.append(item.name, item.value);
            }
        }
        return formData;
    };
    Bridge.prototype.request = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var method, url, axiosConfig, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = params.method;
                        url = params.url;
                        axiosConfig = {
                            method: method,
                            url: url,
                        };
                        if (params.headers) {
                            axiosConfig.headers = params.headers;
                        }
                        if (params.data) {
                            if (params.headers && params.headers["Content-Type"] === "multipart/form-data") {
                                axiosConfig.data = this.constructFormData(params.data);
                            }
                            else {
                                axiosConfig.data = params.data;
                            }
                        }
                        if (params.responseType) {
                            axiosConfig.responseType = params.responseType;
                        }
                        return [4 /*yield*/, axios(axiosConfig)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                }
            });
        });
    };
    Bridge.prototype.requestWithoutResponse = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.request(params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Bridge.prototype.uuid = function () {
        return uuid();
    };
    Bridge.prototype.isoDate = function () {
        return new Date().toISOString();
    };
    Bridge.prototype.toISOString = function (seconds) {
        var t = new Date();
        t.setSeconds(seconds);
        return t.toISOString();
    };
    Bridge.prototype.jwtSign = function (payload, privateKey, alg, options) {
        // Make instance of classes to be plain objects
        var plainPayload = __assign({}, payload);
        var plainOptions = __assign(__assign({}, options), { algorithm: alg });
        return jwt.sign(plainPayload, privateKey, plainOptions);
    };
    Bridge.prototype.jwtVerify = function (token, privateKey, algorithm) {
        return jwt.verify(token, privateKey, { algorithms: [algorithm] });
    };
    Bridge.prototype.jwtDecode = function (token) {
        return jwt.decode(token);
    };
    /**
     *
     * @returns amount of seconds since 1970-01-01T00:00:00Z
     */
    Bridge.prototype.getSystemTime = function () {
        return Math.floor(Date.now() / 1000);
    };
    return Bridge;
}());
export { Bridge };
//# sourceMappingURL=bridge.js.map