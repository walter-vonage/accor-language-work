import { IQueue } from "./IQueue.js";
import { ISession } from "../../session/ISession.js";
import { ICreateQueueOptions } from "./contracts/ICreateQueueOptions.js";
import { QueueDetailsResponse } from "./contracts/queueDetailsResponse.js";
import { IUpdateQueueOptions } from "./contracts/IUpdateQueueOptions.js";
export declare class Queue implements IQueue {
    private bridge;
    private config;
    private provider;
    private session;
    constructor(session: ISession);
    createQueue(name: string, callback: string, options: ICreateQueueOptions): Promise<void>;
    updateQueue(queueName: string, options: IUpdateQueueOptions): Promise<void>;
    list(): Promise<string[]>;
    getQueueDetails(name: string): Promise<QueueDetailsResponse>;
    deleteQueue(name: string): Promise<void>;
    pauseQueue(name: string): Promise<void>;
    resumeQueue(name: string): Promise<void>;
    enqueue<T>(name: string, data: T[]): Promise<void>;
    enqueueSingle<T>(name: string, data: T): Promise<void>;
    deadLetterList(name: string): Promise<string[]>;
    deadLetterDequeue<T>(name: string, count?: number): Promise<T>;
}
//# sourceMappingURL=queue.d.ts.map