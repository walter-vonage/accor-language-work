var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { DirectoryPayload } from "./contracts/directoryPayload.js";
import { RemoveAssetPayload } from "./contracts/removeAssetPayload.js";
import { ListAssetsPayload } from "./contracts/listAssetsPayload.js";
import { ASSETS_ACTION } from "./enums/assetsAction.js";
import { REQUEST_VERB } from "../../request/enums/requestVerb.js";
import { RequestParams } from "../../request/contracts/requestParams.js";
import { LinkPayload } from "./contracts/linkPayload.js";
import { FormDataObject } from "../../request/contracts/formDataObject.js";
import { DATA_TYPE } from "../../request/enums/dataType.js";
var Assets = /** @class */ (function () {
    function Assets(session) {
        this.provider = "vonage-assets";
        this.session = session;
        this.bridge = session.bridge;
        this.config = session.config;
    }
    Assets.prototype.createDir = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var requestParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestParams = new RequestParams();
                        requestParams.method = REQUEST_VERB.POST;
                        requestParams.data = new DirectoryPayload(name);
                        requestParams.url = this.config.getExecutionUrl(this.provider, ASSETS_ACTION.MKDIR);
                        requestParams.headers = this.session.constructRequestHeaders();
                        return [4 /*yield*/, this.session.request(requestParams)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Assets.prototype.remove = function (remoteFilePath, recursive) {
        if (recursive === void 0) { recursive = false; }
        return __awaiter(this, void 0, void 0, function () {
            var requestParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestParams = new RequestParams();
                        requestParams.method = REQUEST_VERB.POST;
                        requestParams.data = new RemoveAssetPayload(remoteFilePath, recursive);
                        requestParams.url = this.config.getExecutionUrl(this.provider, ASSETS_ACTION.REMOVE);
                        requestParams.headers = this.session.constructRequestHeaders();
                        return [4 /*yield*/, this.session.request(requestParams)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Assets.prototype.getRemoteFile = function (remoteFilePath) {
        return __awaiter(this, void 0, void 0, function () {
            var requestParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestParams = new RequestParams();
                        requestParams.method = REQUEST_VERB.GET;
                        requestParams.url = this.config.getExecutionUrl(this.provider, ASSETS_ACTION.BINARY, { key: remoteFilePath });
                        requestParams.headers = this.session.constructRequestHeaders();
                        requestParams.responseType = "stream" /* RESPONSE_TYPE.STREAM */;
                        return [4 /*yield*/, this.session.request(requestParams)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Assets.prototype.generateLink = function (remoteFilePath, duration) {
        if (duration === void 0) { duration = "5m"; }
        return __awaiter(this, void 0, void 0, function () {
            var requestParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestParams = new RequestParams();
                        requestParams.method = REQUEST_VERB.POST;
                        requestParams.data = new LinkPayload(remoteFilePath, duration);
                        requestParams.url = this.config.getExecutionUrl(this.provider, ASSETS_ACTION.LINK);
                        requestParams.headers = this.session.constructRequestHeaders();
                        return [4 /*yield*/, this.session.request(requestParams)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Assets.prototype.uploadFiles = function (localFilePaths, remoteDir, retentionPeriod) {
        return __awaiter(this, void 0, void 0, function () {
            var streams, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        streams = [];
                        for (i = 0; i < localFilePaths.length; i++) {
                            streams.push(this.bridge.createReadStream(localFilePaths[i]));
                        }
                        return [4 /*yield*/, this.uploadData(streams, remoteDir, null, retentionPeriod)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Assets.prototype.uploadData = function (data, remoteDir, filenames, retentionPeriod) {
        return __awaiter(this, void 0, void 0, function () {
            var requestParams, i, formData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestParams = new RequestParams();
                        requestParams.method = REQUEST_VERB.POST;
                        requestParams.dataType = DATA_TYPE.FORM_DATA;
                        requestParams.data = [];
                        for (i = 0; i < data.length; i++) {
                            formData = new FormDataObject();
                            formData.name = "file[".concat(i, "]");
                            formData.value = data[i];
                            if (filenames != null && filenames[i] != null) {
                                formData.filename = filenames[i];
                            }
                            requestParams.data.push(formData);
                        }
                        requestParams.url = this.config.getExecutionUrl(this.provider, ASSETS_ACTION.COPY, {
                            dst: remoteDir,
                            retention: retentionPeriod,
                        });
                        requestParams.headers = this.session.constructRequestHeaders();
                        requestParams.headers["Content-Type"] = "multipart/form-data";
                        return [4 /*yield*/, this.session.request(requestParams)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Assets.prototype.list = function (remotePath, recursive, limit) {
        if (recursive === void 0) { recursive = false; }
        if (limit === void 0) { limit = 1000; }
        return __awaiter(this, void 0, void 0, function () {
            var requestParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestParams = new RequestParams();
                        requestParams.method = REQUEST_VERB.POST;
                        requestParams.data = new ListAssetsPayload(remotePath, recursive, limit);
                        requestParams.url = this.config.getExecutionUrl(this.provider, ASSETS_ACTION.LIST);
                        requestParams.headers = this.session.constructRequestHeaders();
                        return [4 /*yield*/, this.session.request(requestParams)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Assets;
}());
export { Assets };
//# sourceMappingURL=assets.js.map