var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { CONVERSATION_ACTION } from "./enums/conversationAction.js";
import { ConversationPayloadWithCallback } from "./contracts/conversationPayloadWithCallback.js";
import { RequestParams } from "../../request/contracts/requestParams.js";
import { REQUEST_VERB } from "../../request/enums/requestVerb.js";
import { Filter } from "../../session/contracts/filter.js";
var Conversation = /** @class */ (function () {
    function Conversation(session) {
        this.provider = "vonage-voice";
        this.session = session;
    }
    /**
     * 1. If no filters are provided, subscribe to all events
     * 2. If filters are provided, subscribe to those events
     * 3. Scoped to the application
     * @param callback endpoint to receive events
     * @param events VONAGE conversation events e.g. ['app:knocking', 'audio:say', 'audio:say:stop', 'audio:say:done', 'audio:play', 'audio:play:stop', 'audio:play:done', 'audio:dtmf', 'audio:earmuff:on', 'audio:earmuff:off', 'audio:mute:on', 'audio:mute:off', 'leg:status:update', 'member:joined', 'member:invited', 'member:left', 'conversation:created']
     * @returns listener id
     */
    Conversation.prototype.onConversationEvent = function (callback, events) {
        return __awaiter(this, void 0, void 0, function () {
            var filters, rp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filters = [];
                        if (events != null) {
                            filters.push(new Filter('type', 'contains', events));
                        }
                        rp = new RequestParams();
                        rp.method = REQUEST_VERB.POST;
                        rp.data = new ConversationPayloadWithCallback(this.session.wrapCallback(callback, filters));
                        rp.url = this.session.config.getExecutionUrl(this.provider, CONVERSATION_ACTION.CONVERSATION_SUBSCRIBE_EVENT);
                        rp.headers = this.session.constructRequestHeaders();
                        return [4 /*yield*/, this.session.request(rp)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, rp.data.callback.id];
                }
            });
        });
    };
    return Conversation;
}());
export { Conversation };
//# sourceMappingURL=conversation.js.map