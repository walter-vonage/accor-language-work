var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { StateCommand } from "./contracts/stateCommand.js";
import { StateOperations } from "./enums/stateOperations.js";
import { REQUEST_VERB } from "../../request/enums/requestVerb.js";
import { RequestParams } from "../../request/contracts/requestParams.js";
import { IndexType } from "./enums/fullText/IndexType.js";
/**
 * Represents a state object that can be used to store and retrieve data.
 * @class
 */
var State = /** @class */ (function () {
    /**
     * Creates a new State.
     * @constructor
     * @param {ISession} session - The session for the state object.
     * @param {string} namespace - The namespace for the state object.
     */
    function State(session, namespace) {
        if (namespace === void 0) { namespace = null; }
        /**
         * The provider for the state object.
         */
        this.provider = "client-persistence-api";
        this.bridge = session.bridge;
        this.url = session.config.getExecutionUrl(this.provider);
        if (namespace == null) {
            this.namespace = "state:".concat(session.id);
        }
        else {
            this.namespace = namespace;
        }
        this.session = session;
    }
    /**
     * Creates a new state command.
     * @param {string} op - The operation for the command.
     * @param {string} key - The key for the command.
     * @param {string[]} args - The arguments for the command.
     * @returns {StateCommand} The new state command.
     */
    State.prototype.createCommand = function (op, key, args) {
        return new StateCommand(op, this.namespace, key, args);
    };
    /**
     * Executes a state command.
     * @param {IStateCommand} command - The state command to execute.
     * @returns {Promise<T>} The result of the command.
     */
    State.prototype.executeCommand = function (command) {
        return __awaiter(this, void 0, void 0, function () {
            var requestParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestParams = new RequestParams();
                        requestParams.method = REQUEST_VERB.POST;
                        requestParams.url = this.url;
                        requestParams.headers = this.session.constructRequestHeaders();
                        requestParams.data = command;
                        return [4 /*yield*/, this.session.request(requestParams)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Sets the value for a key in the state object.
     * @param {string} key - The key to set.
     * @param {T} value - The value to set for the key.
     * @returns {Promise<string>} A promise that resolves to "OK" if the operation was successful.
     */
    State.prototype.set = function (key, value) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [];
                        payload.push(this.bridge.jsonStringify(value));
                        command = this.createCommand(StateOperations.SET, key, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieves the value for a key in the state object.
     * @param {string} key - The key to retrieve.
     * @returns {Promise<T>} A promise that resolves to the value for the key.
     */
    State.prototype.get = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [];
                        command = this.createCommand(StateOperations.GET, key, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1:
                        result = _a.sent();
                        if (result != null && result != "") {
                            return [2 /*return*/, this.bridge.jsonParse(result)];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    /**
     * Deletes a key from the state object.
     * @param {string} key - The key to delete.
     * @returns {Promise<string>} A promise that resolves to "1" if the key was deleted, or "0" if the key did not exist.
     */
    State.prototype.delete = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [];
                        command = this.createCommand(StateOperations.DEL, key, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Increments the value of a key in the state object by a specified amount.
     * @param {string} key - The key to increment.
     * @param {number} value - The amount to increment the key by.
     * @returns {Promise<string>} A promise that resolves to the new value of the key.
     */
    State.prototype.increment = function (key, value) {
        return __awaiter(this, void 0, void 0, function () {
            var args, command, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [this.bridge.jsonStringify(value)];
                        command = this.createCommand(StateOperations.INCRBY, key, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.bridge.jsonParse(response)];
                }
            });
        });
    };
    /**
     * Decrements the value of a key in the state object by a specified amount.
     * @param {string} key - The key to decrement.
     * @param {number} value - The amount to decrement the key by.
     * @returns {Promise<string>} A promise that resolves to the new value of the key.
     */
    State.prototype.decrement = function (key, value) {
        return __awaiter(this, void 0, void 0, function () {
            var args, command, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [this.bridge.jsonStringify(value)];
                        command = this.createCommand(StateOperations.DECRBY, key, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.bridge.jsonParse(response)];
                }
            });
        });
    };
    /**
     * Sets an expiration time for a key in the state object.
     * @param {string} key - The key to set the expiration time for.
     * @param {number} seconds - The number of seconds after which the key will expire.
     * @param {EXPIRE_OPTION} [option] - An optional object specifying additional options for the operation.
     * @returns {Promise<string>} A promise that resolves to "1" if the operation was successful, or "0" if the key does not exist.
     */
    State.prototype.expire = function (key, seconds, option) {
        return __awaiter(this, void 0, void 0, function () {
            var args, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [this.bridge.jsonStringify(seconds)];
                        if (option != null) {
                            args.push(option);
                        }
                        command = this.createCommand(StateOperations.EXPIRE, key, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Deletes a key from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string[]} keys - The keys to delete from the hash table.
     * @returns {Promise<string>} A promise that resolves to "1" if the key was deleted, or "0" if the key did not exist.
     */
    State.prototype.mapDelete = function (htable, keys) {
        return __awaiter(this, void 0, void 0, function () {
            var command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = this.createCommand(StateOperations.HDEL, htable, keys);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Determines whether a key exists in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string} key - The key to check for in the hash table.
     * @returns {Promise<string>} A promise that resolves to "1" if the key exists, or "0" if the key does not exist.
     */
    State.prototype.mapExists = function (htable, key) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [key];
                        command = this.createCommand(StateOperations.HEXISTS, htable, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieves all keys and values from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @returns {Promise<Record<string, string>>} A promise that resolves to an object containing the keys and values from the hash table.
     */
    State.prototype.mapGetAll = function (htable) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command, response, result, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [];
                        command = this.createCommand(StateOperations.HGETALL, htable, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1:
                        response = _a.sent();
                        result = {};
                        for (i = 0; i < response.length; i += 2) {
                            result[response[i]] = response[i + 1];
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * Retrieves multiple values from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string[]} keys - The keys to retrieve from the hash table.
     * @returns {Promise<string[]>} A promise that resolves to an array of values for the specified keys.
     */
    State.prototype.mapGetMultiple = function (htable, keys) {
        return __awaiter(this, void 0, void 0, function () {
            var command, response, result, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = this.createCommand(StateOperations.HMGET, htable, keys);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1:
                        response = _a.sent();
                        result = [];
                        for (i = 0; i < response.length; i++) {
                            result.push(response[i]);
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * Retrieves all values from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @returns {Promise<string[]>} A promise that resolves to an array of values from the hash table.
     */
    State.prototype.mapGetValues = function (htable) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command, response, result, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [];
                        command = this.createCommand(StateOperations.HVALS, htable, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1:
                        response = _a.sent();
                        result = [];
                        for (i = 0; i < response.length; i++) {
                            result.push(response[i]);
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * Retrieves the value for a key in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string} key - The key to retrieve from the hash table.
     * @returns {Promise<string>} A promise that resolves to the value for the key in the hash table.
     */
    State.prototype.mapGetValue = function (htable, key) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [key];
                        command = this.createCommand(StateOperations.HGET, htable, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Sets multiple key-value pairs in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {Record<string, string>} keyValuePairs - An object containing the key-value pairs to set in the hash table.
     * @returns {Promise<string>} A promise that resolves to the number of fields that were added.
     */
    State.prototype.mapSet = function (htable, keyValuePairs) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, keys, i, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [];
                        keys = this.bridge.getObjectKeys(keyValuePairs);
                        for (i = 0; i < keys.length; i++) {
                            payload.push(keys[i]);
                            payload.push(keyValuePairs[keys[i]]);
                        }
                        command = this.createCommand(StateOperations.HSET, htable, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Increments the value for a key in a hash table in the state object.
     * @param {string} htable The name of the hash table.
     * @param {string} key The key to increment.
     * @param {number} value The amount to increment the key by.
     * @returns {Promise<string>} A promise that resolves to the new value for the key.
     */
    State.prototype.mapIncrement = function (htable, key, value) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [key, this.bridge.jsonStringify(value)];
                        command = this.createCommand(StateOperations.HINCRBY, htable, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieves the number of key-value pairs in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @returns {Promise<string>} A promise that resolves to the number of key-value pairs in the hash table.
     */
    State.prototype.mapLength = function (htable) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [];
                        command = this.createCommand(StateOperations.HLEN, htable, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *
     * @param htable Name of the hash table
     * @param cursor An integer representing the cursor's position. It starts at 0 and should be set to the cursor returned by the previous call to continue the iteration.
     * @param pattern A pattern to filter the results
     * @param count A hint for the number of elements to be returned. It doesn't guarantee the exact number of elements to be returned, but it should be greater than 0.
     * @returns
     */
    State.prototype.mapScan = function (htable, cursor, pattern, count) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [];
                        payload.push(cursor);
                        if (pattern != null) {
                            payload.push("MATCH");
                            payload.push(pattern);
                        }
                        if (count != null) {
                            if (count <= 0) {
                                throw this.bridge.createSdkError("mapScan: count must be greater than 0");
                            }
                            payload.push("COUNT");
                            payload.push(this.bridge.jsonStringify(count));
                        }
                        command = this.createCommand(StateOperations.HSCAN, htable, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Adds a value to the end of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {T} value - The value to add to the list.
     * @returns {Promise<string>} A promise that resolves to the new length of the list.
     */
    State.prototype.listAppend = function (list, value) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [this.bridge.jsonStringify(value)];
                        command = this.createCommand(StateOperations.RPUSH, list, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Removes and retrieves one or more values from the end of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} count - The number of values to remove and retrieve from the end of the list.
     * @returns {Promise<T[]>} A promise that resolves to an array of values removed from the end of the list.
     */
    State.prototype.listEndPop = function (list, count) {
        if (count === void 0) { count = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var args, command, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [this.bridge.jsonStringify(count)];
                        command = this.createCommand(StateOperations.RPOP, list, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.parseResponse(response)];
                }
            });
        });
    };
    /**
     * Adds a value to the beginning of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {T} value - The value to add to the list.
     * @returns {Promise<string>} A promise that resolves to the new length of the list.
     */
    State.prototype.listPrepend = function (list, value) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [this.bridge.jsonStringify(value)];
                        command = this.createCommand(StateOperations.LPUSH, list, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()]; // returns the array length  e.g. "1"
                }
            });
        });
    };
    /**
     * Removes and retrieves one or more values from the beginning of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} count - The number of values to remove and retrieve from the beginning of the list. Default is 1.
     * @returns {Promise<T[]>} A promise that resolves to an array of values removed from the beginning of the list.
     */
    State.prototype.listStartPop = function (list, count) {
        if (count === void 0) { count = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var args, command, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [this.bridge.jsonStringify(count)];
                        command = this.createCommand(StateOperations.LPOP, list, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.parseResponse(response)];
                }
            });
        });
    };
    /**
     * Removes one or more occurrences of a value from a list in the state object.
     * @param {string} list - The name of the list.
     * @param {T} value - The value to remove from the list.
     * @param {number} count - The number of occurrences to remove. A positive number removes the first `count` occurrences, a negative number removes the last `count` occurrences, and a value of 0 removes all occurrences.
     * @returns {Promise<string>} A promise that resolves to the number of occurrences removed from the list.
     */
    State.prototype.listRemove = function (list, value, count) {
        if (count === void 0) { count = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var args, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [this.bridge.jsonStringify(count), this.bridge.jsonStringify(value)];
                        command = this.createCommand(StateOperations.LREM, list, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieves the length of a list in the state object.
     * @param {string} list - The name of the list.
     * @returns {Promise<string>} A promise that resolves to the length of the list.
     */
    State.prototype.listLength = function (list) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = [];
                        command = this.createCommand(StateOperations.LLEN, list, payload);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieves a range of values from a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} startPos - The starting position of the range.
     * @param {number} endPos - The ending position of the range.
     * @returns {Promise<T[]>} A promise that resolves to an array of values from the specified range in the list.
     */
    State.prototype.listRange = function (list, startPos, endPos) {
        if (startPos === void 0) { startPos = 0; }
        if (endPos === void 0) { endPos = -1; }
        return __awaiter(this, void 0, void 0, function () {
            var args, command, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [this.bridge.jsonStringify(startPos), this.bridge.jsonStringify(endPos)];
                        command = this.createCommand(StateOperations.LRANGE, list, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.parseResponse(response)];
                }
            });
        });
    };
    /**
     * Trims a list in the state object to contain only the specified range of values.
     * @param {string} list - The name of the list.
     * @param {number} startPos - The starting position of the range.
     * @param {number} endPos - The ending position of the range.
     * @returns {Promise<string>} A promise that resolves to "OK" if the operation was successful.
     */
    State.prototype.listTrim = function (list, startPos, endPos) {
        return __awaiter(this, void 0, void 0, function () {
            var args, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [this.bridge.jsonStringify(startPos), this.bridge.jsonStringify(endPos)];
                        command = this.createCommand(StateOperations.LTRIM, list, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Inserts a value into a list in the state object either before or after a pivot value.
     * @param {string} list - The name of the list.
     * @param {boolean} before - If `true`, the value is inserted before the pivot value. If `false`, the value is inserted after the pivot value.
     * @param {T} pivot - The pivot value.
     * @param {T} value - The value to insert into the list.
     * @returns {Promise<string>} A promise that resolves to the new length of the list if the operation was successful.
     */
    State.prototype.listInsert = function (list, before, pivot, value) {
        return __awaiter(this, void 0, void 0, function () {
            var direction, args, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        direction = "AFTER";
                        if (before == true) {
                            direction = "BEFORE";
                        }
                        args = [direction, this.bridge.jsonStringify(pivot), this.bridge.jsonStringify(value)];
                        command = this.createCommand(StateOperations.LINSERT, list, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieves the value at a specific position in a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} position - The position of the value to retrieve.
     * @returns {Promise<T>} A promise that resolves to the value at the specified position in the list.
     */
    State.prototype.listIndex = function (list, position) {
        return __awaiter(this, void 0, void 0, function () {
            var args, command, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [this.bridge.jsonStringify(position)];
                        command = this.createCommand(StateOperations.LINDEX, list, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.bridge.jsonParse(response)];
                }
            });
        });
    };
    /**
     * Sets the value at a specific position in a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} position - The position of the value to set.
     * @param {T} value - The value to set at the specified position in the list.
     * @returns {Promise<string>} A promise that resolves to "OK" if the operation was successful.
     */
    State.prototype.listSet = function (list, position, value) {
        return __awaiter(this, void 0, void 0, function () {
            var args, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [this.bridge.jsonStringify(position), this.bridge.jsonStringify(value)];
                        command = this.createCommand(StateOperations.LSET, list, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    State.prototype.createIndex = function (name, options) {
        return __awaiter(this, void 0, void 0, function () {
            var args, i, i, i, field, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [];
                        if (options.on != null) {
                            args.push('ON');
                            args.push(options.on);
                        }
                        else {
                            args.push('ON');
                            args.push(IndexType.HASH);
                        }
                        // from 1 to 15 prefixes are allowed
                        args.push('PREFIX');
                        args.push(this.bridge.jsonStringify(options.prefix.count));
                        for (i = 0; i < options.prefix.prefixes.length; i++) {
                            args.push(options.prefix.prefixes[i]);
                        }
                        if (options.filter != null) {
                            args.push('FILTER');
                            args.push(options.filter);
                        }
                        if (options.language != null) {
                            args.push('LANGUAGE');
                            args.push(options.language);
                        }
                        if (options.languageField != null) {
                            args.push('LANGUAGE_FIELD');
                            args.push(options.languageField);
                        }
                        if (options.score != null) {
                            args.push('SCORE');
                            args.push(this.bridge.jsonStringify(options.score));
                        }
                        if (options.scoreField != null) {
                            args.push('SCORE_FIELD');
                            args.push(options.scoreField);
                        }
                        if (options.payloadField != null) {
                            args.push('PAYLOAD_FIELD');
                            args.push(options.payloadField);
                        }
                        if (options.maxTextFields) {
                            args.push('MAXTEXTFIELDS');
                        }
                        if (options.temporary != null) {
                            args.push('TEMPORARY');
                            args.push(this.bridge.jsonStringify(options.temporary));
                        }
                        if (options.noOffsets) {
                            args.push('NOOFFSETS');
                        }
                        if (options.noHl) {
                            args.push('NOHL');
                        }
                        if (options.noFields) {
                            args.push('NOFIELDS');
                        }
                        if (options.noFreqs) {
                            args.push('NOFREQS');
                        }
                        if (options.stopwords != null) {
                            args.push('STOPWORDS');
                            args.push(this.bridge.jsonStringify(options.stopwords.count));
                            for (i = 0; i < options.stopwords.stopwords.length; i++) {
                                args.push(options.stopwords.stopwords[i]);
                            }
                        }
                        if (options.skipInitialScan) {
                            args.push('SKIPINITIALSCAN');
                        }
                        args.push('SCHEMA');
                        for (i = 0; i < options.schema.length; i++) {
                            field = options.schema[i];
                            args.push(field.fieldName);
                            if (field.alias != null) {
                                args.push('AS');
                                args.push(field.alias);
                            }
                            args.push(field.type);
                            if (field.sortable) {
                                args.push('SORTABLE');
                            }
                            if (field.unf) {
                                args.push('UNF');
                            }
                            if (field.noIndex) {
                                args.push('NOINDEX');
                            }
                        }
                        command = this.createCommand(StateOperations.FTCREATE, name, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    State.prototype.search = function (index, query, options) {
        return __awaiter(this, void 0, void 0, function () {
            var args, i, filter, i, geoFilter, i, i, i, field, i, i, i, param, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [];
                        args.push(query);
                        if (options != null) {
                            if (options.noContent == true) {
                                args.push('NOCONTENT');
                            }
                            if (options.verbatim == true) {
                                args.push('VERBATIM');
                            }
                            if (options.noStopwords == true) {
                                args.push('NOSTOPWORDS');
                            }
                            if (options.withScores == true) {
                                args.push('WITHSCORES');
                            }
                            if (options.withPayloads == true) {
                                args.push('WITHPAYLOADS');
                            }
                            if (options.withSortKeys == true) {
                                args.push('WITHSORTKEYS');
                            }
                            if (options.filters != null) {
                                for (i = 0; i < options.filters.length; i++) {
                                    filter = options.filters[i];
                                    args.push('FILTER');
                                    args.push(filter.numericField);
                                    args.push(this.bridge.jsonStringify(filter.min));
                                    args.push(this.bridge.jsonStringify(filter.max));
                                }
                            }
                            if (options.geoFilters != null) {
                                for (i = 0; i < options.geoFilters.length; i++) {
                                    geoFilter = options.geoFilters[i];
                                    args.push('GEOFILTER');
                                    args.push(geoFilter.geoField);
                                    args.push(this.bridge.jsonStringify(geoFilter.lon));
                                    args.push(this.bridge.jsonStringify(geoFilter.lat));
                                    args.push(this.bridge.jsonStringify(geoFilter.radius));
                                    args.push(geoFilter.unit);
                                }
                            }
                            if (options.inKeys != null) {
                                args.push('INKEYS');
                                args.push(this.bridge.jsonStringify(options.inKeys.count));
                                for (i = 0; i < options.inKeys.keys.length; i++) {
                                    args.push(options.inKeys.keys[i]);
                                }
                            }
                            if (options.inFields != null) {
                                args.push('INFIELDS');
                                args.push(this.bridge.jsonStringify(options.inFields.count));
                                for (i = 0; i < options.inFields.fields.length; i++) {
                                    args.push(options.inFields.fields[i]);
                                }
                            }
                            if (options.return != null) {
                                args.push('RETURN');
                                args.push(this.bridge.jsonStringify(options.return.count));
                                for (i = 0; i < options.return.fields.length; i++) {
                                    field = options.return.fields[i];
                                    args.push(field.identifier);
                                    if (field.property != null) {
                                        args.push('AS');
                                        args.push(field.property);
                                    }
                                }
                            }
                            if (options.summarize != null) {
                                args.push('SUMMARIZE');
                                if (options.summarize.fields != null) {
                                    args.push('FIELDS');
                                    args.push(this.bridge.jsonStringify(options.summarize.fields.length));
                                    for (i = 0; i < options.summarize.fields.length; i++) {
                                        args.push(options.summarize.fields[i]);
                                    }
                                }
                                if (options.summarize.frags != null) {
                                    args.push('FRAGS');
                                    args.push(this.bridge.jsonStringify(options.summarize.frags));
                                }
                                if (options.summarize.len != null) {
                                    args.push('LEN');
                                    args.push(this.bridge.jsonStringify(options.summarize.len));
                                }
                                if (options.summarize.separator != null) {
                                    args.push('SEPARATOR');
                                    args.push(options.summarize.separator);
                                }
                            }
                            if (options.highlight != null) {
                                args.push('HIGHLIGHT');
                                if (options.highlight.fields != null) {
                                    args.push('FIELDS');
                                    args.push(this.bridge.jsonStringify(options.highlight.fields.length));
                                    for (i = 0; i < options.highlight.fields.length; i++) {
                                        args.push(options.highlight.fields[i]);
                                    }
                                }
                                if (options.highlight.tags != null) {
                                    args.push('TAGS');
                                    args.push(options.highlight.tags.open);
                                    args.push(options.highlight.tags.close);
                                }
                            }
                            if (options.slop != null) {
                                args.push('SLOP');
                                args.push(this.bridge.jsonStringify(options.slop));
                            }
                            if (options.timeout != null) {
                                args.push('TIMEOUT');
                                args.push(this.bridge.jsonStringify(options.timeout));
                            }
                            if (options.inorder == true) {
                                args.push('INORDER');
                            }
                            if (options.language != null) {
                                args.push('LANGUAGE');
                                args.push(options.language);
                            }
                            if (options.expander != null) {
                                args.push('EXPANDER');
                                args.push(options.expander);
                            }
                            if (options.scorer != null) {
                                args.push('SCORER');
                                args.push(options.scorer);
                            }
                            if (options.explainScore == true) {
                                args.push('EXPLAINSCORE');
                            }
                            if (options.payload != null) {
                                args.push('PAYLOAD');
                                args.push(options.payload);
                            }
                            if (options.sortBy != null) {
                                args.push('SORTBY');
                                args.push(options.sortBy.field);
                                if (options.sortBy.order != null) {
                                    args.push(options.sortBy.order);
                                }
                            }
                            if (options.limit != null) {
                                args.push('LIMIT');
                                args.push(this.bridge.jsonStringify(options.limit.offset));
                                args.push(this.bridge.jsonStringify(options.limit.num));
                            }
                            if (options.params != null) {
                                args.push('PARAMS');
                                args.push(this.bridge.jsonStringify(options.params.length));
                                for (i = 0; i < options.params.length; i++) {
                                    param = options.params[i];
                                    args.push(param.name);
                                    args.push(param.value);
                                }
                            }
                            if (options.dialect != null) {
                                args.push('DIALECT');
                                args.push(options.dialect);
                            }
                        }
                        command = this.createCommand(StateOperations.FTSEARCH, index, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    State.prototype.dropIndex = function (index, deleteDocs) {
        return __awaiter(this, void 0, void 0, function () {
            var args, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [];
                        if (deleteDocs == true) {
                            args.push('DD');
                        }
                        command = this.createCommand(StateOperations.FTDROPINDEX, index, args);
                        return [4 /*yield*/, this.executeCommand(command)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    State.prototype.parseResponse = function (response) {
        var result = [];
        if (response != null) {
            for (var i = 0; i < response.length; i++) {
                result.push(this.bridge.jsonParse(response[i]));
            }
        }
        return result;
    };
    return State;
}());
export { State };
//# sourceMappingURL=state.js.map