import { IBridge } from "../../IBridge.js";
import { IConfig } from "../config/IConfig.js";
import { IJWT } from "./IJwt.js";
import { ICreateVonageTokenParams } from "./contracts/ICreateVonageTokenParams.js";
export declare class JWT implements IJWT {
    private bridge;
    private config;
    _token: string;
    ttl: number;
    constructor(bridge: IBridge, config: IConfig);
    /**
     * Returns a token if it is not expired, otherwise it generates a new token
     * @returns {string} JWT token that is used to authenticate with the NERU Providers API
     */
    getToken(): string;
    /**
     *
     * @returns {boolean} True if the token is expired 20 seconds from now, otherwise false
     */
    isExpired(): boolean;
    /**
     * Generate a JWT token that is used to authenticate with the NERU Providers API
     * @param exp Expire time in seconds since epoch
     * @returns {string} JWT token that is used to authenticate with the NERU Providers API
     */
    createVCRToken(exp: number): string;
    /**
     * Generate a JWT token that is used to authenticate with Vonage APIs
     * @param params
     * @param {number} params.exp - Expire time in seconds since epoch
     * @param {Record<string, any>=} params.aclPaths - ACL paths to add to the token
     * @param {string=} params.subject - Subject to add to the token
     * @returns {string} - JWT Token
     */
    createVonageToken(params: ICreateVonageTokenParams): string;
}
//# sourceMappingURL=jwt.d.ts.map