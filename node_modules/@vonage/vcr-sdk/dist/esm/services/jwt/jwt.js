import { Acl } from "./contracts/acl.js";
import { VCRJWTPayload } from "./contracts/vcrJWTPayload.js";
import { VonageJWTPayload } from "./contracts/vonageJWTPayload.js";
import { ALGORITHM } from "./enums/algorithm.js";
var JWT = /** @class */ (function () {
    function JWT(bridge, config) {
        this._token = null;
        this.ttl = 300; // 5 minutes
        this.bridge = bridge;
        this.config = config;
    }
    /**
     * Returns a token if it is not expired, otherwise it generates a new token
     * @returns {string} JWT token that is used to authenticate with the NERU Providers API
     */
    JWT.prototype.getToken = function () {
        try {
            if (this._token == null || this.isExpired()) {
                var exp = this.bridge.getSystemTime() + this.ttl;
                this._token = this.createVCRToken(exp);
            }
            return this._token;
        }
        catch (e) {
            throw this.bridge.createSdkError("getToken:" + this.bridge.getErrorMessage(e));
        }
    };
    /**
     *
     * @returns {boolean} True if the token is expired 20 seconds from now, otherwise false
     */
    JWT.prototype.isExpired = function () {
        var nowInSeconds = this.bridge.getSystemTime();
        var twentySeconds = 20;
        var payload = this.bridge.jwtDecode(this._token);
        return payload.exp - twentySeconds <= nowInSeconds;
    };
    /**
     * Generate a JWT token that is used to authenticate with the NERU Providers API
     * @param exp Expire time in seconds since epoch
     * @returns {string} JWT token that is used to authenticate with the NERU Providers API
     */
    JWT.prototype.createVCRToken = function (exp) {
        var p = new VCRJWTPayload();
        p.api_application_id = this.config.apiApplicationId;
        p.api_account_id = this.config.apiAccountId;
        p.exp = exp;
        p.sub = this.config.instanceServiceName;
        return this.bridge.jwtSign(p, this.config.privateKey, ALGORITHM.RS256);
    };
    /**
     * Generate a JWT token that is used to authenticate with Vonage APIs
     * @param params
     * @param {number} params.exp - Expire time in seconds since epoch
     * @param {Record<string, any>=} params.aclPaths - ACL paths to add to the token
     * @param {string=} params.subject - Subject to add to the token
     * @returns {string} - JWT Token
     */
    JWT.prototype.createVonageToken = function (params) {
        var jwtPayload = new VonageJWTPayload();
        jwtPayload.iat = this.bridge.getSystemTime();
        jwtPayload.exp = params.exp;
        jwtPayload.application_id = this.config.apiApplicationId;
        jwtPayload.jti = this.bridge.uuid();
        if (params.aclPaths) {
            jwtPayload.acl = new Acl();
            jwtPayload.acl.paths = params.aclPaths;
        }
        if (params.subject) {
            jwtPayload.sub = params.subject;
        }
        return this.bridge.jwtSign(jwtPayload, this.config.privateKey, ALGORITHM.RS256);
    };
    return JWT;
}());
export { JWT };
//# sourceMappingURL=jwt.js.map