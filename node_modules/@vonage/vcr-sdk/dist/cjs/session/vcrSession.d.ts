import { IBridge } from "../IBridge.js";
import { IEventEmitter } from "../providers/events/IEventEmitter.js";
import { ILogContext } from "../providers/logger/contracts/ILogContext.js";
import { ILogger } from "../providers/logger/ILogger.js";
import { IConfig } from "../services/config/IConfig.js";
import { IJWT } from "../services/jwt/IJwt.js";
import { IFilter } from "./contracts/IFilter.js";
import { ISession } from "./ISession.js";
import { WrappedCallback } from "./contracts/wrappedCallback.js";
import { IRequestParams } from "../request/contracts/IRequestParams.js";
export declare class VCRSession implements ISession {
    id: string;
    config: IConfig;
    jwt: IJWT;
    bridge: IBridge;
    logger: ILogger;
    eventEmitter: IEventEmitter;
    constructor(bridge: IBridge, config: IConfig, jwt: IJWT, id: string);
    emitSessionCreatedEvent(ttl: number): Promise<void>;
    createUUID(): string;
    getToken(): string;
    log(level: string, message: string, context?: ILogContext): void;
    wrapCallback(route: string, filters: IFilter[]): WrappedCallback;
    constructCommandHeaders(): Record<string, string>;
    constructRequestHeaders(): Record<string, string>;
    request<T, K>(params: IRequestParams<T>): Promise<K>;
    private logStreamResponse;
    private logFormData;
    private logResponse;
    private logError;
}
//# sourceMappingURL=vcrSession.d.ts.map