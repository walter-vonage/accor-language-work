"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bridge = void 0;
const axios_1 = __importDefault(require("axios"));
const agentkeepalive_1 = __importDefault(require("agentkeepalive"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const uuid_1 = require("uuid");
const fs = __importStar(require("fs"));
const path_1 = require("path");
const form_data_1 = __importDefault(require("form-data"));
class SdkError extends Error {
    constructor(message) {
        super(message);
        this.name = this.constructor.name;
        Error.captureStackTrace(this, this.constructor);
    }
}
class Bridge {
    constructor() {
        this.configureHttp();
    }
    createSdkError(message) {
        return new SdkError(message);
    }
    getErrorMessage(error) {
        if (error instanceof Error) {
            return error.message;
        }
        throw this.createSdkError("bridge.getErrorMessage: Invalid error type was provided");
    }
    encodeUriComponent(s) {
        return encodeURIComponent(s);
    }
    parsePath(path) {
        return (0, path_1.parse)(path);
    }
    configureHttp() {
        axios_1.default.defaults.httpAgent = new agentkeepalive_1.default({
            maxSockets: 100,
            maxFreeSockets: 10,
            timeout: 60000,
            freeSocketTimeout: 30000,
        });
        axios_1.default.defaults.httpsAgent = new agentkeepalive_1.default.HttpsAgent({
            maxSockets: 100,
            maxFreeSockets: 10,
            timeout: 60000,
            freeSocketTimeout: 30000,
        });
    }
    testRegEx(str, regExp) {
        return new RegExp(regExp).test(str);
    }
    isInteger(value) {
        return Number.isInteger(value);
    }
    substring(str, start, end = null) {
        if (end == null) {
            return str.substring(start);
        }
        return str.substring(start, end);
    }
    getObjectKeys(obj) {
        return Object.keys(obj);
    }
    jsonStringify(value) {
        return JSON.stringify(value);
    }
    jsonParse(json) {
        return JSON.parse(json);
    }
    getEnv(name) {
        return process.env[name];
    }
    log(data) {
        console.log(data);
    }
    runBackgroundTask(task) { }
    createReadStream(path) {
        return fs.createReadStream(path);
    }
    constructFormData(data) {
        const formData = new form_data_1.default();
        for (const item of data) {
            if (item.filename != null) {
                formData.append(item.name, item.value, item.filename);
            }
            else {
                formData.append(item.name, item.value);
            }
        }
        return formData;
    }
    request(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = params.method;
            const url = params.url;
            const axiosConfig = {
                method,
                url,
            };
            if (params.headers) {
                axiosConfig.headers = params.headers;
            }
            if (params.data) {
                if (params.headers && params.headers["Content-Type"] === "multipart/form-data") {
                    axiosConfig.data = this.constructFormData(params.data);
                }
                else {
                    axiosConfig.data = params.data;
                }
            }
            if (params.responseType) {
                axiosConfig.responseType = params.responseType;
            }
            const response = yield (0, axios_1.default)(axiosConfig);
            return response.data;
        });
    }
    requestWithoutResponse(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.request(params);
        });
    }
    uuid() {
        return (0, uuid_1.v4)();
    }
    isoDate() {
        return new Date().toISOString();
    }
    toISOString(seconds) {
        const t = new Date();
        t.setSeconds(seconds);
        return t.toISOString();
    }
    jwtSign(payload, privateKey, alg, options) {
        // Make instance of classes to be plain objects
        const plainPayload = Object.assign({}, payload);
        const plainOptions = Object.assign(Object.assign({}, options), { algorithm: alg });
        return jsonwebtoken_1.default.sign(plainPayload, privateKey, plainOptions);
    }
    jwtVerify(token, privateKey, algorithm) {
        return jsonwebtoken_1.default.verify(token, privateKey, { algorithms: [algorithm] });
    }
    jwtDecode(token) {
        return jsonwebtoken_1.default.decode(token);
    }
    /**
     *
     * @returns amount of seconds since 1970-01-01T00:00:00Z
     */
    getSystemTime() {
        return Math.floor(Date.now() / 1000);
    }
}
exports.Bridge = Bridge;
//# sourceMappingURL=bridge.js.map