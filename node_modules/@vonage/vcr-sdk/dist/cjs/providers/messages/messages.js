"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Messages = void 0;
const messageAction_js_1 = require("./enums/messageAction.js");
const listenEventsPayload_js_1 = require("./contracts/listenEventsPayload.js");
const listenMessagesPayload_js_1 = require("./contracts/listenMessagesPayload.js");
const requestVerb_js_1 = require("../../request/enums/requestVerb.js");
const requestParams_js_1 = require("../../request/contracts/requestParams.js");
class Messages {
    constructor(session) {
        this.provider = "vonage-messaging";
        this.session = session;
    }
    onMessage(callback, from, to) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = new listenMessagesPayload_js_1.ListenMessagesPayload(from, to, this.session.wrapCallback(callback, []));
            requestParams.headers = this.session.constructRequestHeaders();
            requestParams.url = this.session.config.getExecutionUrl(this.provider, messageAction_js_1.MESSAGE_ACTION.SUBSCRIBE_INBOUND_MESSAGES);
            yield this.session.request(requestParams);
            return requestParams.data.callback.id;
        });
    }
    onMessageEvent(callback, from, to) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = new listenEventsPayload_js_1.ListenEventsPayload(from, to, this.session.wrapCallback(callback, []));
            requestParams.headers = this.session.constructRequestHeaders();
            requestParams.url = this.session.config.getExecutionUrl(this.provider, messageAction_js_1.MESSAGE_ACTION.SUBSCRIBE_INBOUND_EVENTS);
            yield this.session.request(requestParams);
            return requestParams.data.callback.id;
        });
    }
}
exports.Messages = Messages;
//# sourceMappingURL=messages.js.map