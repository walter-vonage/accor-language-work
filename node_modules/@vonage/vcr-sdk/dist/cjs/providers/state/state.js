"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.State = void 0;
const stateCommand_js_1 = require("./contracts/stateCommand.js");
const stateOperations_js_1 = require("./enums/stateOperations.js");
const requestVerb_js_1 = require("../../request/enums/requestVerb.js");
const requestParams_js_1 = require("../../request/contracts/requestParams.js");
const IndexType_js_1 = require("./enums/fullText/IndexType.js");
/**
 * Represents a state object that can be used to store and retrieve data.
 * @class
 */
class State {
    /**
     * Creates a new State.
     * @constructor
     * @param {ISession} session - The session for the state object.
     * @param {string} namespace - The namespace for the state object.
     */
    constructor(session, namespace = null) {
        /**
         * The provider for the state object.
         */
        this.provider = "client-persistence-api";
        this.bridge = session.bridge;
        this.url = session.config.getExecutionUrl(this.provider);
        if (namespace == null) {
            this.namespace = `state:${session.id}`;
        }
        else {
            this.namespace = namespace;
        }
        this.session = session;
    }
    /**
     * Creates a new state command.
     * @param {string} op - The operation for the command.
     * @param {string} key - The key for the command.
     * @param {string[]} args - The arguments for the command.
     * @returns {StateCommand} The new state command.
     */
    createCommand(op, key, args) {
        return new stateCommand_js_1.StateCommand(op, this.namespace, key, args);
    }
    /**
     * Executes a state command.
     * @param {IStateCommand} command - The state command to execute.
     * @returns {Promise<T>} The result of the command.
     */
    executeCommand(command) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.url = this.url;
            requestParams.headers = this.session.constructRequestHeaders();
            requestParams.data = command;
            return yield this.session.request(requestParams);
        });
    }
    /**
     * Sets the value for a key in the state object.
     * @param {string} key - The key to set.
     * @param {T} value - The value to set for the key.
     * @returns {Promise<string>} A promise that resolves to "OK" if the operation was successful.
     */
    set(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            payload.push(this.bridge.jsonStringify(value));
            const command = this.createCommand(stateOperations_js_1.StateOperations.SET, key, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Retrieves the value for a key in the state object.
     * @param {string} key - The key to retrieve.
     * @returns {Promise<T>} A promise that resolves to the value for the key.
     */
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.GET, key, payload);
            const result = yield this.executeCommand(command);
            if (result != null && result != "") {
                return this.bridge.jsonParse(result);
            }
            return null;
        });
    }
    /**
     * Deletes a key from the state object.
     * @param {string} key - The key to delete.
     * @returns {Promise<string>} A promise that resolves to "1" if the key was deleted, or "0" if the key did not exist.
     */
    delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.DEL, key, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Increments the value of a key in the state object by a specified amount.
     * @param {string} key - The key to increment.
     * @param {number} value - The amount to increment the key by.
     * @returns {Promise<string>} A promise that resolves to the new value of the key.
     */
    increment(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.INCRBY, key, args);
            const response = yield this.executeCommand(command);
            return this.bridge.jsonParse(response);
        });
    }
    /**
     * Decrements the value of a key in the state object by a specified amount.
     * @param {string} key - The key to decrement.
     * @param {number} value - The amount to decrement the key by.
     * @returns {Promise<string>} A promise that resolves to the new value of the key.
     */
    decrement(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.DECRBY, key, args);
            const response = yield this.executeCommand(command);
            return this.bridge.jsonParse(response);
        });
    }
    /**
     * Sets an expiration time for a key in the state object.
     * @param {string} key - The key to set the expiration time for.
     * @param {number} seconds - The number of seconds after which the key will expire.
     * @param {EXPIRE_OPTION} [option] - An optional object specifying additional options for the operation.
     * @returns {Promise<string>} A promise that resolves to "1" if the operation was successful, or "0" if the key does not exist.
     */
    expire(key, seconds, option) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(seconds)];
            if (option != null) {
                args.push(option);
            }
            const command = this.createCommand(stateOperations_js_1.StateOperations.EXPIRE, key, args);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Deletes a key from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string[]} keys - The keys to delete from the hash table.
     * @returns {Promise<string>} A promise that resolves to "1" if the key was deleted, or "0" if the key did not exist.
     */
    mapDelete(htable, keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const command = this.createCommand(stateOperations_js_1.StateOperations.HDEL, htable, keys);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Determines whether a key exists in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string} key - The key to check for in the hash table.
     * @returns {Promise<string>} A promise that resolves to "1" if the key exists, or "0" if the key does not exist.
     */
    mapExists(htable, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [key];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HEXISTS, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Retrieves all keys and values from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @returns {Promise<Record<string, string>>} A promise that resolves to an object containing the keys and values from the hash table.
     */
    mapGetAll(htable) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HGETALL, htable, payload);
            const response = yield this.executeCommand(command);
            const result = {};
            for (let i = 0; i < response.length; i += 2) {
                result[response[i]] = response[i + 1];
            }
            return result;
        });
    }
    /**
     * Retrieves multiple values from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string[]} keys - The keys to retrieve from the hash table.
     * @returns {Promise<string[]>} A promise that resolves to an array of values for the specified keys.
     */
    mapGetMultiple(htable, keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const command = this.createCommand(stateOperations_js_1.StateOperations.HMGET, htable, keys);
            const response = yield this.executeCommand(command);
            const result = [];
            for (let i = 0; i < response.length; i++) {
                result.push(response[i]);
            }
            return result;
        });
    }
    /**
     * Retrieves all values from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @returns {Promise<string[]>} A promise that resolves to an array of values from the hash table.
     */
    mapGetValues(htable) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HVALS, htable, payload);
            const response = yield this.executeCommand(command);
            const result = [];
            for (let i = 0; i < response.length; i++) {
                result.push(response[i]);
            }
            return result;
        });
    }
    /**
     * Retrieves the value for a key in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string} key - The key to retrieve from the hash table.
     * @returns {Promise<string>} A promise that resolves to the value for the key in the hash table.
     */
    mapGetValue(htable, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [key];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HGET, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Sets multiple key-value pairs in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {Record<string, string>} keyValuePairs - An object containing the key-value pairs to set in the hash table.
     * @returns {Promise<string>} A promise that resolves to the number of fields that were added.
     */
    mapSet(htable, keyValuePairs) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const keys = this.bridge.getObjectKeys(keyValuePairs);
            for (let i = 0; i < keys.length; i++) {
                payload.push(keys[i]);
                payload.push(keyValuePairs[keys[i]]);
            }
            const command = this.createCommand(stateOperations_js_1.StateOperations.HSET, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Increments the value for a key in a hash table in the state object.
     * @param {string} htable The name of the hash table.
     * @param {string} key The key to increment.
     * @param {number} value The amount to increment the key by.
     * @returns {Promise<string>} A promise that resolves to the new value for the key.
     */
    mapIncrement(htable, key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [key, this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HINCRBY, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Retrieves the number of key-value pairs in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @returns {Promise<string>} A promise that resolves to the number of key-value pairs in the hash table.
     */
    mapLength(htable) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HLEN, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     *
     * @param htable Name of the hash table
     * @param cursor An integer representing the cursor's position. It starts at 0 and should be set to the cursor returned by the previous call to continue the iteration.
     * @param pattern A pattern to filter the results
     * @param count A hint for the number of elements to be returned. It doesn't guarantee the exact number of elements to be returned, but it should be greater than 0.
     * @returns
     */
    mapScan(htable, cursor, pattern, count) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            payload.push(cursor);
            if (pattern != null) {
                payload.push("MATCH");
                payload.push(pattern);
            }
            if (count != null) {
                if (count <= 0) {
                    throw this.bridge.createSdkError(`mapScan: count must be greater than 0`);
                }
                payload.push("COUNT");
                payload.push(this.bridge.jsonStringify(count));
            }
            const command = this.createCommand(stateOperations_js_1.StateOperations.HSCAN, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Adds a value to the end of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {T} value - The value to add to the list.
     * @returns {Promise<string>} A promise that resolves to the new length of the list.
     */
    listAppend(list, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.RPUSH, list, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Removes and retrieves one or more values from the end of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} count - The number of values to remove and retrieve from the end of the list.
     * @returns {Promise<T[]>} A promise that resolves to an array of values removed from the end of the list.
     */
    listEndPop(list, count = 1) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(count)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.RPOP, list, args); // removes and returns elements from the end of a list
            const response = yield this.executeCommand(command);
            return this.parseResponse(response);
        });
    }
    /**
     * Adds a value to the beginning of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {T} value - The value to add to the list.
     * @returns {Promise<string>} A promise that resolves to the new length of the list.
     */
    listPrepend(list, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LPUSH, list, payload);
            return yield this.executeCommand(command); // returns the array length  e.g. "1"
        });
    }
    /**
     * Removes and retrieves one or more values from the beginning of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} count - The number of values to remove and retrieve from the beginning of the list. Default is 1.
     * @returns {Promise<T[]>} A promise that resolves to an array of values removed from the beginning of the list.
     */
    listStartPop(list, count = 1) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(count)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LPOP, list, args); // removes and returns elements from the start of a list
            const response = yield this.executeCommand(command);
            return this.parseResponse(response);
        });
    }
    /**
     * Removes one or more occurrences of a value from a list in the state object.
     * @param {string} list - The name of the list.
     * @param {T} value - The value to remove from the list.
     * @param {number} count - The number of occurrences to remove. A positive number removes the first `count` occurrences, a negative number removes the last `count` occurrences, and a value of 0 removes all occurrences.
     * @returns {Promise<string>} A promise that resolves to the number of occurrences removed from the list.
     */
    listRemove(list, value, count = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(count), this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LREM, list, args);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Retrieves the length of a list in the state object.
     * @param {string} list - The name of the list.
     * @returns {Promise<string>} A promise that resolves to the length of the list.
     */
    listLength(list) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LLEN, list, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Retrieves a range of values from a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} startPos - The starting position of the range.
     * @param {number} endPos - The ending position of the range.
     * @returns {Promise<T[]>} A promise that resolves to an array of values from the specified range in the list.
     */
    listRange(list, startPos = 0, endPos = -1) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(startPos), this.bridge.jsonStringify(endPos)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LRANGE, list, args);
            const response = yield this.executeCommand(command);
            return this.parseResponse(response);
        });
    }
    /**
     * Trims a list in the state object to contain only the specified range of values.
     * @param {string} list - The name of the list.
     * @param {number} startPos - The starting position of the range.
     * @param {number} endPos - The ending position of the range.
     * @returns {Promise<string>} A promise that resolves to "OK" if the operation was successful.
     */
    listTrim(list, startPos, endPos) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(startPos), this.bridge.jsonStringify(endPos)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LTRIM, list, args);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Inserts a value into a list in the state object either before or after a pivot value.
     * @param {string} list - The name of the list.
     * @param {boolean} before - If `true`, the value is inserted before the pivot value. If `false`, the value is inserted after the pivot value.
     * @param {T} pivot - The pivot value.
     * @param {T} value - The value to insert into the list.
     * @returns {Promise<string>} A promise that resolves to the new length of the list if the operation was successful.
     */
    listInsert(list, before, pivot, value) {
        return __awaiter(this, void 0, void 0, function* () {
            let direction = "AFTER";
            if (before == true) {
                direction = "BEFORE";
            }
            const args = [direction, this.bridge.jsonStringify(pivot), this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LINSERT, list, args);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Retrieves the value at a specific position in a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} position - The position of the value to retrieve.
     * @returns {Promise<T>} A promise that resolves to the value at the specified position in the list.
     */
    listIndex(list, position) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(position)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LINDEX, list, args);
            const response = yield this.executeCommand(command);
            return this.bridge.jsonParse(response);
        });
    }
    /**
     * Sets the value at a specific position in a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} position - The position of the value to set.
     * @param {T} value - The value to set at the specified position in the list.
     * @returns {Promise<string>} A promise that resolves to "OK" if the operation was successful.
     */
    listSet(list, position, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(position), this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LSET, list, args);
            return yield this.executeCommand(command);
        });
    }
    createIndex(name, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [];
            if (options.on != null) {
                args.push('ON');
                args.push(options.on);
            }
            else {
                args.push('ON');
                args.push(IndexType_js_1.IndexType.HASH);
            }
            // from 1 to 15 prefixes are allowed
            args.push('PREFIX');
            args.push(this.bridge.jsonStringify(options.prefix.count));
            for (var i = 0; i < options.prefix.prefixes.length; i++) {
                args.push(options.prefix.prefixes[i]);
            }
            if (options.filter != null) {
                args.push('FILTER');
                args.push(options.filter);
            }
            if (options.language != null) {
                args.push('LANGUAGE');
                args.push(options.language);
            }
            if (options.languageField != null) {
                args.push('LANGUAGE_FIELD');
                args.push(options.languageField);
            }
            if (options.score != null) {
                args.push('SCORE');
                args.push(this.bridge.jsonStringify(options.score));
            }
            if (options.scoreField != null) {
                args.push('SCORE_FIELD');
                args.push(options.scoreField);
            }
            if (options.payloadField != null) {
                args.push('PAYLOAD_FIELD');
                args.push(options.payloadField);
            }
            if (options.maxTextFields) {
                args.push('MAXTEXTFIELDS');
            }
            if (options.temporary != null) {
                args.push('TEMPORARY');
                args.push(this.bridge.jsonStringify(options.temporary));
            }
            if (options.noOffsets) {
                args.push('NOOFFSETS');
            }
            if (options.noHl) {
                args.push('NOHL');
            }
            if (options.noFields) {
                args.push('NOFIELDS');
            }
            if (options.noFreqs) {
                args.push('NOFREQS');
            }
            if (options.stopwords != null) {
                args.push('STOPWORDS');
                args.push(this.bridge.jsonStringify(options.stopwords.count));
                for (var i = 0; i < options.stopwords.stopwords.length; i++) {
                    args.push(options.stopwords.stopwords[i]);
                }
            }
            if (options.skipInitialScan) {
                args.push('SKIPINITIALSCAN');
            }
            args.push('SCHEMA');
            for (var i = 0; i < options.schema.length; i++) {
                var field = options.schema[i];
                args.push(field.fieldName);
                if (field.alias != null) {
                    args.push('AS');
                    args.push(field.alias);
                }
                args.push(field.type);
                if (field.sortable) {
                    args.push('SORTABLE');
                }
                if (field.unf) {
                    args.push('UNF');
                }
                if (field.noIndex) {
                    args.push('NOINDEX');
                }
            }
            const command = this.createCommand(stateOperations_js_1.StateOperations.FTCREATE, name, args);
            return yield this.executeCommand(command);
        });
    }
    search(index, query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [];
            args.push(query);
            if (options != null) {
                if (options.noContent == true) {
                    args.push('NOCONTENT');
                }
                if (options.verbatim == true) {
                    args.push('VERBATIM');
                }
                if (options.noStopwords == true) {
                    args.push('NOSTOPWORDS');
                }
                if (options.withScores == true) {
                    args.push('WITHSCORES');
                }
                if (options.withPayloads == true) {
                    args.push('WITHPAYLOADS');
                }
                if (options.withSortKeys == true) {
                    args.push('WITHSORTKEYS');
                }
                if (options.filters != null) {
                    for (let i = 0; i < options.filters.length; i++) {
                        const filter = options.filters[i];
                        args.push('FILTER');
                        args.push(filter.numericField);
                        args.push(this.bridge.jsonStringify(filter.min));
                        args.push(this.bridge.jsonStringify(filter.max));
                    }
                }
                if (options.geoFilters != null) {
                    for (let i = 0; i < options.geoFilters.length; i++) {
                        const geoFilter = options.geoFilters[i];
                        args.push('GEOFILTER');
                        args.push(geoFilter.geoField);
                        args.push(this.bridge.jsonStringify(geoFilter.lon));
                        args.push(this.bridge.jsonStringify(geoFilter.lat));
                        args.push(this.bridge.jsonStringify(geoFilter.radius));
                        args.push(geoFilter.unit);
                    }
                }
                if (options.inKeys != null) {
                    args.push('INKEYS');
                    args.push(this.bridge.jsonStringify(options.inKeys.count));
                    for (let i = 0; i < options.inKeys.keys.length; i++) {
                        args.push(options.inKeys.keys[i]);
                    }
                }
                if (options.inFields != null) {
                    args.push('INFIELDS');
                    args.push(this.bridge.jsonStringify(options.inFields.count));
                    for (let i = 0; i < options.inFields.fields.length; i++) {
                        args.push(options.inFields.fields[i]);
                    }
                }
                if (options.return != null) {
                    args.push('RETURN');
                    args.push(this.bridge.jsonStringify(options.return.count));
                    for (let i = 0; i < options.return.fields.length; i++) {
                        const field = options.return.fields[i];
                        args.push(field.identifier);
                        if (field.property != null) {
                            args.push('AS');
                            args.push(field.property);
                        }
                    }
                }
                if (options.summarize != null) {
                    args.push('SUMMARIZE');
                    if (options.summarize.fields != null) {
                        args.push('FIELDS');
                        args.push(this.bridge.jsonStringify(options.summarize.fields.length));
                        for (let i = 0; i < options.summarize.fields.length; i++) {
                            args.push(options.summarize.fields[i]);
                        }
                    }
                    if (options.summarize.frags != null) {
                        args.push('FRAGS');
                        args.push(this.bridge.jsonStringify(options.summarize.frags));
                    }
                    if (options.summarize.len != null) {
                        args.push('LEN');
                        args.push(this.bridge.jsonStringify(options.summarize.len));
                    }
                    if (options.summarize.separator != null) {
                        args.push('SEPARATOR');
                        args.push(options.summarize.separator);
                    }
                }
                if (options.highlight != null) {
                    args.push('HIGHLIGHT');
                    if (options.highlight.fields != null) {
                        args.push('FIELDS');
                        args.push(this.bridge.jsonStringify(options.highlight.fields.length));
                        for (let i = 0; i < options.highlight.fields.length; i++) {
                            args.push(options.highlight.fields[i]);
                        }
                    }
                    if (options.highlight.tags != null) {
                        args.push('TAGS');
                        args.push(options.highlight.tags.open);
                        args.push(options.highlight.tags.close);
                    }
                }
                if (options.slop != null) {
                    args.push('SLOP');
                    args.push(this.bridge.jsonStringify(options.slop));
                }
                if (options.timeout != null) {
                    args.push('TIMEOUT');
                    args.push(this.bridge.jsonStringify(options.timeout));
                }
                if (options.inorder == true) {
                    args.push('INORDER');
                }
                if (options.language != null) {
                    args.push('LANGUAGE');
                    args.push(options.language);
                }
                if (options.expander != null) {
                    args.push('EXPANDER');
                    args.push(options.expander);
                }
                if (options.scorer != null) {
                    args.push('SCORER');
                    args.push(options.scorer);
                }
                if (options.explainScore == true) {
                    args.push('EXPLAINSCORE');
                }
                if (options.payload != null) {
                    args.push('PAYLOAD');
                    args.push(options.payload);
                }
                if (options.sortBy != null) {
                    args.push('SORTBY');
                    args.push(options.sortBy.field);
                    if (options.sortBy.order != null) {
                        args.push(options.sortBy.order);
                    }
                }
                if (options.limit != null) {
                    args.push('LIMIT');
                    args.push(this.bridge.jsonStringify(options.limit.offset));
                    args.push(this.bridge.jsonStringify(options.limit.num));
                }
                if (options.params != null) {
                    args.push('PARAMS');
                    args.push(this.bridge.jsonStringify(options.params.length));
                    for (let i = 0; i < options.params.length; i++) {
                        const param = options.params[i];
                        args.push(param.name);
                        args.push(param.value);
                    }
                }
                if (options.dialect != null) {
                    args.push('DIALECT');
                    args.push(options.dialect);
                }
            }
            const command = this.createCommand(stateOperations_js_1.StateOperations.FTSEARCH, index, args);
            return yield this.executeCommand(command);
        });
    }
    dropIndex(index, deleteDocs) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [];
            if (deleteDocs == true) {
                args.push('DD');
            }
            const command = this.createCommand(stateOperations_js_1.StateOperations.FTDROPINDEX, index, args);
            return yield this.executeCommand(command);
        });
    }
    parseResponse(response) {
        const result = [];
        if (response != null) {
            for (let i = 0; i < response.length; i++) {
                result.push(this.bridge.jsonParse(response[i]));
            }
        }
        return result;
    }
}
exports.State = State;
//# sourceMappingURL=state.js.map