"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VonageAPI = void 0;
const vonageAPIActions_js_1 = require("./vonageAPIActions.js");
const invokePayload_js_1 = require("./contracts/invokePayload.js");
const requestVerb_js_1 = require("../../request/enums/requestVerb.js");
const requestParams_js_1 = require("../../request/contracts/requestParams.js");
class VonageAPI {
    constructor(session) {
        this.provider = "vonage-api";
        this.session = session;
        this.bridge = session.bridge;
    }
    invoke(url, method, body, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = new invokePayload_js_1.InvokePayload(url, method, body);
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = payload;
            requestParams.headers = this.session.constructRequestHeaders();
            if (headers != null) {
                const keys = this.bridge.getObjectKeys(headers);
                for (let i = 0; i < keys.length; i++) {
                    requestParams.headers[keys[i]] = headers[keys[i]];
                }
            }
            requestParams.url = this.session.config.getExecutionUrl(this.provider, vonageAPIActions_js_1.VonageAPIActions.INVOKE);
            return yield this.session.request(requestParams);
        });
    }
}
exports.VonageAPI = VonageAPI;
//# sourceMappingURL=vonageAPI.js.map