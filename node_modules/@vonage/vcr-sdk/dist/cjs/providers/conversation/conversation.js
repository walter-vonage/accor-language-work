"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Conversation = void 0;
const conversationAction_js_1 = require("./enums/conversationAction.js");
const conversationPayloadWithCallback_js_1 = require("./contracts/conversationPayloadWithCallback.js");
const requestParams_js_1 = require("../../request/contracts/requestParams.js");
const requestVerb_js_1 = require("../../request/enums/requestVerb.js");
const filter_js_1 = require("../../session/contracts/filter.js");
class Conversation {
    constructor(session) {
        this.provider = "vonage-voice";
        this.session = session;
    }
    /**
     * 1. If no filters are provided, subscribe to all events
     * 2. If filters are provided, subscribe to those events
     * 3. Scoped to the application
     * @param callback endpoint to receive events
     * @param events VONAGE conversation events e.g. ['app:knocking', 'audio:say', 'audio:say:stop', 'audio:say:done', 'audio:play', 'audio:play:stop', 'audio:play:done', 'audio:dtmf', 'audio:earmuff:on', 'audio:earmuff:off', 'audio:mute:on', 'audio:mute:off', 'leg:status:update', 'member:joined', 'member:invited', 'member:left', 'conversation:created']
     * @returns listener id
     */
    onConversationEvent(callback, events) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = [];
            if (events != null) {
                filters.push(new filter_js_1.Filter('type', 'contains', events));
            }
            const rp = new requestParams_js_1.RequestParams();
            rp.method = requestVerb_js_1.REQUEST_VERB.POST;
            rp.data = new conversationPayloadWithCallback_js_1.ConversationPayloadWithCallback(this.session.wrapCallback(callback, filters));
            rp.url = this.session.config.getExecutionUrl(this.provider, conversationAction_js_1.CONVERSATION_ACTION.CONVERSATION_SUBSCRIBE_EVENT);
            rp.headers = this.session.constructRequestHeaders();
            yield this.session.request(rp);
            return rp.data.callback.id;
        });
    }
}
exports.Conversation = Conversation;
//# sourceMappingURL=conversation.js.map