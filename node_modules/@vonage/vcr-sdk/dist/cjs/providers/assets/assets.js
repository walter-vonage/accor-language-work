"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Assets = void 0;
const directoryPayload_js_1 = require("./contracts/directoryPayload.js");
const removeAssetPayload_js_1 = require("./contracts/removeAssetPayload.js");
const listAssetsPayload_js_1 = require("./contracts/listAssetsPayload.js");
const assetsAction_js_1 = require("./enums/assetsAction.js");
const requestVerb_js_1 = require("../../request/enums/requestVerb.js");
const requestParams_js_1 = require("../../request/contracts/requestParams.js");
const linkPayload_js_1 = require("./contracts/linkPayload.js");
const formDataObject_js_1 = require("../../request/contracts/formDataObject.js");
const dataType_js_1 = require("../../request/enums/dataType.js");
class Assets {
    constructor(session) {
        this.provider = "vonage-assets";
        this.session = session;
        this.bridge = session.bridge;
        this.config = session.config;
    }
    createDir(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = new directoryPayload_js_1.DirectoryPayload(name);
            requestParams.url = this.config.getExecutionUrl(this.provider, assetsAction_js_1.ASSETS_ACTION.MKDIR);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    remove(remoteFilePath, recursive = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = new removeAssetPayload_js_1.RemoveAssetPayload(remoteFilePath, recursive);
            requestParams.url = this.config.getExecutionUrl(this.provider, assetsAction_js_1.ASSETS_ACTION.REMOVE);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    getRemoteFile(remoteFilePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.GET;
            requestParams.url = this.config.getExecutionUrl(this.provider, assetsAction_js_1.ASSETS_ACTION.BINARY, { key: remoteFilePath });
            requestParams.headers = this.session.constructRequestHeaders();
            requestParams.responseType = "stream" /* RESPONSE_TYPE.STREAM */;
            return yield this.session.request(requestParams);
        });
    }
    generateLink(remoteFilePath, duration = "5m") {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = new linkPayload_js_1.LinkPayload(remoteFilePath, duration);
            requestParams.url = this.config.getExecutionUrl(this.provider, assetsAction_js_1.ASSETS_ACTION.LINK);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    uploadFiles(localFilePaths, remoteDir, retentionPeriod) {
        return __awaiter(this, void 0, void 0, function* () {
            const streams = [];
            for (let i = 0; i < localFilePaths.length; i++) {
                streams.push(this.bridge.createReadStream(localFilePaths[i]));
            }
            yield this.uploadData(streams, remoteDir, null, retentionPeriod);
            return;
        });
    }
    uploadData(data, remoteDir, filenames, retentionPeriod) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.dataType = dataType_js_1.DATA_TYPE.FORM_DATA;
            requestParams.data = [];
            for (let i = 0; i < data.length; i++) {
                const formData = new formDataObject_js_1.FormDataObject();
                formData.name = `file[${i}]`;
                formData.value = data[i];
                if (filenames != null && filenames[i] != null) {
                    formData.filename = filenames[i];
                }
                requestParams.data.push(formData);
            }
            requestParams.url = this.config.getExecutionUrl(this.provider, assetsAction_js_1.ASSETS_ACTION.COPY, {
                dst: remoteDir,
                retention: retentionPeriod,
            });
            requestParams.headers = this.session.constructRequestHeaders();
            requestParams.headers["Content-Type"] = "multipart/form-data";
            return yield this.session.request(requestParams);
        });
    }
    list(remotePath, recursive = false, limit = 1000) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = new listAssetsPayload_js_1.ListAssetsPayload(remotePath, recursive, limit);
            requestParams.url = this.config.getExecutionUrl(this.provider, assetsAction_js_1.ASSETS_ACTION.LIST);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
}
exports.Assets = Assets;
//# sourceMappingURL=assets.js.map