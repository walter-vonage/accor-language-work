"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const requestVerb_js_1 = require("../../request/enums/requestVerb.js");
const requestParams_js_1 = require("../../request/contracts/requestParams.js");
const logAction_js_1 = require("./contracts/logAction.js");
const sourceType_js_1 = require("./enums/sourceType.js");
class Logger {
    constructor(session) {
        this.provider = "logs-submission";
        this.config = session.config;
        this.bridge = session.bridge;
        this.session = session;
        this.url = this.config.getExecutionUrl(this.provider);
    }
    createLogAction(level, message, context = null) {
        const logAction = new logAction_js_1.LogAction();
        logAction.id = this.bridge.uuid();
        logAction.api_application_id = this.config.apiApplicationId;
        logAction.api_account_id = this.config.apiAccountId;
        logAction.session_id = this.session.id;
        logAction.timestamp = this.bridge.isoDate();
        logAction.log_level = level;
        logAction.message = message;
        logAction.source_type = sourceType_js_1.SOURCE_TYPE.APPLICATION;
        logAction.source_id = this.config.instanceServiceName;
        logAction.instance_id = this.config.instanceId;
        if (context != null) {
            logAction.context = context;
        }
        return logAction;
    }
    log(level, message, context = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const logAction = this.createLogAction(level, message, context);
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.url = this.url;
            requestParams.data = logAction;
            requestParams.headers = this.session.constructRequestHeaders();
            yield this.bridge.requestWithoutResponse(requestParams);
        });
    }
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map