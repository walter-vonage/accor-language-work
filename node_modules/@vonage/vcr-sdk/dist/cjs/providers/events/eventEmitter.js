"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventEmitter = void 0;
const requestVerb_js_1 = require("../../request/enums/requestVerb.js");
const requestParams_js_1 = require("../../request/contracts/requestParams.js");
const eventFactory_js_1 = require("./eventFactory.js");
const sessionCreatedDetails_js_1 = require("./contracts/sessionCreatedDetails.js");
const vcrEventType_js_1 = require("./enums/vcrEventType.js");
class EventEmitter {
    constructor(session) {
        this.provider = "events-submission";
        this.config = session.config;
        this.bridge = session.bridge;
        this.session = session;
        this.eventFactory = new eventFactory_js_1.EventFactory(this.session);
        this.url = this.config.getExecutionUrl(this.provider);
    }
    emitSessionCreatedEvent(ttl) {
        return __awaiter(this, void 0, void 0, function* () {
            const expiresAt = this.bridge.toISOString(ttl);
            const details = new sessionCreatedDetails_js_1.SessionCreatedDetails(expiresAt);
            const event = this.eventFactory.createEvent(vcrEventType_js_1.VCR_EVENT_TYPE.SESSION_CREATED, details);
            yield this.emit(event);
        });
    }
    emit(e) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.url = this.url;
            requestParams.data = e;
            requestParams.headers = this.session.constructRequestHeaders();
            yield this.bridge.requestWithoutResponse(requestParams);
        });
    }
}
exports.EventEmitter = EventEmitter;
//# sourceMappingURL=eventEmitter.js.map