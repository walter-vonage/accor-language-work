"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const createQueuePayload_js_1 = require("./contracts/createQueuePayload.js");
const queueRate_js_1 = require("./contracts/queueRate.js");
const requestParams_js_1 = require("../../request/contracts/requestParams.js");
const requestVerb_js_1 = require("../../request/enums/requestVerb.js");
const updateQueuePayload_js_1 = require("./contracts/updateQueuePayload.js");
class Queue {
    constructor(session) {
        this.provider = "queue-service";
        this.session = session;
        this.bridge = session.bridge;
        this.config = session.config;
    }
    createQueue(name, callback, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = new createQueuePayload_js_1.CreateQueuePayload();
            payload.name = name;
            payload.callback = this.session.wrapCallback(callback, []);
            payload.active = options.active;
            payload.rate = new queueRate_js_1.QueueRate();
            payload.rate.maxInflight = options.maxInflight;
            payload.rate.msgPerSecond = options.msgPerSecond;
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = payload;
            requestParams.url = this.config.getExecutionUrl(this.provider, "queue");
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    updateQueue(queueName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = new updateQueuePayload_js_1.UpdateQueuePayload();
            payload.rate = new queueRate_js_1.QueueRate();
            payload.rate.maxInflight = options.maxInflight;
            payload.rate.msgPerSecond = options.msgPerSecond;
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = payload;
            requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${queueName}`);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    list() {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.GET;
            requestParams.data = null;
            requestParams.url = this.config.getExecutionUrl(this.provider, "queue");
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    getQueueDetails(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.GET;
            requestParams.data = null;
            requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}`);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    deleteQueue(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.DEL;
            requestParams.data = null;
            requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}`);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    pauseQueue(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.PUT;
            requestParams.data = null;
            requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}/pause`);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    resumeQueue(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.PUT;
            requestParams.data = null;
            requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}/resume`);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    enqueue(name, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = data;
            requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}/enqueue`);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    enqueueSingle(name, data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.enqueue(name, [data]);
        });
    }
    deadLetterList(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.GET;
            requestParams.data = null;
            requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}/deadletter`);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    deadLetterDequeue(name, count = 1) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = null;
            requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}/deadletter/pop`, {
                count: this.bridge.jsonStringify(count),
            });
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
}
exports.Queue = Queue;
//# sourceMappingURL=queue.js.map