"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scheduler = void 0;
const schedulerAction_js_1 = require("./enums/schedulerAction.js");
const startAtPayload_js_1 = require("./contracts/startAtPayload.js");
const schedulerPayload_js_1 = require("./contracts/schedulerPayload.js");
const listAllPayload_js_1 = require("./contracts/listAllPayload.js");
const requestVerb_js_1 = require("../../request/enums/requestVerb.js");
const requestParams_js_1 = require("../../request/contracts/requestParams.js");
class Scheduler {
    constructor(session) {
        this.apiVersion = "v2";
        this.provider = "vonage-scheduler";
        this.session = session;
        this.bridge = session.bridge;
    }
    startAt(params) {
        return __awaiter(this, void 0, void 0, function* () {
            if (params.id != null && this.bridge.testRegEx(params.id, "^[a-zA-Z0-9][a-zA-Z0-9-_]*$") != true) {
                throw this.bridge.createSdkError("startAt: The input does not match the required pattern ^[a-zA-Z0-9][a-zA-Z0-9-_]*$. Please enter a string that starts with a letter or a digit, and contains only letters, digits, hyphens, and underscores.");
            }
            const payload = new startAtPayload_js_1.StartAtPayload();
            payload.startAt = params.startAt;
            payload.callback = this.session.wrapCallback(params.callback, []);
            if (params.payload != null) {
                payload.payload = params.payload;
            }
            if (params.interval != null) {
                payload.interval = params.interval;
            }
            if (params.id != null) {
                payload.id = params.id;
            }
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = payload;
            requestParams.url = this.session.config.getExecutionUrl(this.provider, `${this.apiVersion}/${schedulerAction_js_1.SCHEDULER_ACTION.CREATE}`);
            requestParams.headers = this.session.constructRequestHeaders();
            const response = yield this.session.request(requestParams);
            return response["id"];
        });
    }
    list(size = 10, cursor) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = new listAllPayload_js_1.ListAllPayload(size, cursor);
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = payload;
            requestParams.url = this.session.config.getExecutionUrl(this.provider, `${this.apiVersion}/${schedulerAction_js_1.SCHEDULER_ACTION.LIST}`);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    get(scheduleId) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = new schedulerPayload_js_1.SchedulerPayload(scheduleId);
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = payload;
            requestParams.url = this.session.config.getExecutionUrl(this.provider, `${this.apiVersion}/${schedulerAction_js_1.SCHEDULER_ACTION.GET}`);
            requestParams.headers = this.session.constructRequestHeaders();
            return yield this.session.request(requestParams);
        });
    }
    cancel(scheduleId) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = new schedulerPayload_js_1.SchedulerPayload(scheduleId);
            const requestParams = new requestParams_js_1.RequestParams();
            requestParams.method = requestVerb_js_1.REQUEST_VERB.POST;
            requestParams.data = payload;
            requestParams.url = this.session.config.getExecutionUrl(this.provider, `${this.apiVersion}/${schedulerAction_js_1.SCHEDULER_ACTION.CANCEL}`);
            requestParams.headers = this.session.constructRequestHeaders();
            yield this.session.request(requestParams);
            return payload.id;
        });
    }
}
exports.Scheduler = Scheduler;
//# sourceMappingURL=scheduler.js.map