"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
class Config {
    constructor(bridge) {
        this.instanceId = "debug";
        this.debug = false;
        this.logsSubmission = true;
        this.namespace = "neru";
        this.bridge = bridge;
        if (this.bridge.getEnv("NAMESPACE") != null) {
            this.namespace = this.bridge.getEnv("NAMESPACE");
        }
        this.instanceServiceName = this.bridge.getEnv("INSTANCE_SERVICE_NAME");
        this.applicationId = this.bridge.getEnv("APPLICATION_ID");
        if (this.bridge.getEnv("INSTANCE_ID") != null) {
            this.instanceId = this.bridge.getEnv("INSTANCE_ID");
        }
        this.apiApplicationId = this.bridge.getEnv("API_APPLICATION_ID");
        this.apiAccountId = this.bridge.getEnv("API_ACCOUNT_ID");
        this.privateKey = this.bridge.getEnv("PRIVATE_KEY");
        this.appUrl = this.bridge.getEnv("VCR_INSTANCE_PUBLIC_URL");
        const debug = this.bridge.getEnv("DEBUG");
        if (debug == "true") {
            this.debug = true;
        }
        this.assetUrl = "http://openfaas.euw1.dev.nexmo.cloud/function/vonage-assets?get=";
    }
    getExecutionUrl(func, pathname = null, queryParams) {
        const hostname = `${func}.${this.namespace}`;
        if (this.debug) {
            return this.constructDebugUrl(hostname, pathname, queryParams);
        }
        return this.constructProdUrl(hostname, pathname, queryParams);
    }
    constructDebugUrl(hostname, pathname, queryParams) {
        let url = "http://localhost:3001";
        if (pathname != null) {
            url += `/${pathname}`;
        }
        url += `?func=${hostname}&async=false`;
        if (queryParams != null) {
            url += "&";
            url += this.queryObjectToString(queryParams);
        }
        return url;
    }
    constructProdUrl(hostname, pathname, queryParams) {
        let url = `http://${hostname}`;
        if (pathname != null) {
            url += `/${pathname}`;
        }
        if (queryParams != null) {
            url += "?";
            url += this.queryObjectToString(queryParams);
        }
        return url;
    }
    queryObjectToString(queryObject) {
        const keys = this.bridge.getObjectKeys(queryObject);
        let queryString = "";
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i]; // Original key
            if (queryObject[key] != null) {
                const encodedKey = this.bridge.encodeUriComponent(key); // Encoded key
                const value = this.bridge.encodeUriComponent(queryObject[key]);
                queryString += `${encodedKey}=${value}`;
                if (i < keys.length - 1) {
                    queryString += "&";
                }
            }
        }
        return queryString;
    }
}
exports.Config = Config;
//# sourceMappingURL=config.js.map