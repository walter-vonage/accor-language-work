var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Bridge } from "../bridge.js";
import { Messages } from "../providers/messages/messages.js";
import { MessageContact } from "../providers/messages/contracts/messageContact.js";
import { SMSMessage } from "../providers/messages/contracts/smsMessage.js";
import { RequestParams } from "../request/requestParams.js";
import { RequestMethods } from "../request/requestMethods.js";
import { State } from "../providers/state/state.js";
import { Neru } from "../neru.js";
var MessagesSmokeTests = /** @class */ (function () {
    function MessagesSmokeTests() {
        this.healthChecksUrl = "https://hc-ping.com";
        this.bridge = new Bridge();
        this.neru = new Neru();
        this.session = this.neru.createSession();
        this.messages = new Messages(this.session);
    }
    MessagesSmokeTests.prototype.onMessage = function (callback, fromNumber, toNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var fromContact, toContact;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fromContact = new MessageContact();
                        fromContact.type = "sms";
                        fromContact.number = fromNumber;
                        toContact = new MessageContact();
                        toContact.type = "sms";
                        toContact.number = toNumber;
                        return [4 /*yield*/, this.messages.onMessage(callback, fromContact, toContact).execute()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MessagesSmokeTests.prototype.onEvent = function (callback, fromNumber, toNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var clientContact, applicationContact;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clientContact = new MessageContact();
                        clientContact.type = "sms";
                        clientContact.number = fromNumber;
                        applicationContact = new MessageContact();
                        applicationContact.type = "sms";
                        applicationContact.number = toNumber;
                        return [4 /*yield*/, this.messages.onMessageEvents(callback, clientContact, applicationContact).execute()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MessagesSmokeTests.prototype.sendMessage = function (fromNumber, toNumber, message) {
        return __awaiter(this, void 0, void 0, function () {
            var smsMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        smsMessage = new SMSMessage();
                        smsMessage.from = fromNumber;
                        smsMessage.to = toNumber;
                        smsMessage.text = message;
                        return [4 /*yield*/, this.messages.send(smsMessage).execute()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MessagesSmokeTests.prototype.checkIncomingMessageAndHitHealthEndpointIfSuccess = function (message, expectedMessage, successPathname) {
        return __awaiter(this, void 0, void 0, function () {
            var requestParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(message == expectedMessage)) return [3 /*break*/, 2];
                        requestParams = new RequestParams();
                        requestParams.method = RequestMethods.POST;
                        requestParams.url = "".concat(this.healthChecksUrl, "/").concat(successPathname);
                        return [4 /*yield*/, this.bridge.requestWithoutResponse(requestParams)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    MessagesSmokeTests.prototype.checkIncomingEventAndHitHealthEndpointIfSuccess = function (sessionId, status, successPathname) {
        return __awaiter(this, void 0, void 0, function () {
            var session, state, submitted, delivered, requestParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        session = this.neru.getSessionById(sessionId);
                        state = new State(session);
                        if (!(status == "submitted")) return [3 /*break*/, 2];
                        return [4 /*yield*/, state.incrby("submitted", 1)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(status == "delivered")) return [3 /*break*/, 4];
                        return [4 /*yield*/, state.incrby("delivered", 1)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [4 /*yield*/, state.get("submitted")];
                    case 5:
                        submitted = (_a.sent()) || 0;
                        return [4 /*yield*/, state.get("delivered")];
                    case 6:
                        delivered = (_a.sent()) || 0;
                        if (!(submitted && delivered)) return [3 /*break*/, 9];
                        requestParams = new RequestParams();
                        requestParams.method = RequestMethods.POST;
                        requestParams.url = "".concat(this.healthChecksUrl, "/").concat(successPathname);
                        return [4 /*yield*/, this.bridge.requestWithoutResponse(requestParams)];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, state.set("events", null)];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    return MessagesSmokeTests;
}());
export { MessagesSmokeTests };
//# sourceMappingURL=messagesTest.js.map