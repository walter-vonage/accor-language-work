import { IBridge } from '../IBridge.js';
import { ILogContext } from '../providers/logger/ILogContext.js';
import { ICommandService } from '../services/commandService/ICommandService.js';
import { IConfig } from '../services/config/IConfig.js';
import { IJWT } from '../services/jwt/IJwt.js';
import { IActionPayload } from './IActionPayload.js';
import { IFilter } from './IFilter.js';
import { WrappedCallback } from './wrappedCallback.js';
export interface ISession {
    id: string;
    commandService: ICommandService;
    bridge: IBridge;
    config: IConfig;
    jwt: IJWT;
    createUUID(): string;
    getToken(): string;
    log(level: string, message: string, context: ILogContext): void;
    wrapCallback(route: string, filters: IFilter[]): WrappedCallback;
    constructCommandHeaders(): Record<string, string>;
    constructRequestHeaders(): Record<string, string>;
    executeAction<T, K>(actionPayload: IActionPayload<T>, method: string): Promise<K>;
}
//# sourceMappingURL=ISession.d.ts.map