import { IBridge } from "../IBridge.js";
import { IEventEmitter } from "../providers/events/IEventEmitter.js";
import { ILogContext } from "../providers/logger/ILogContext.js";
import { ILogger } from "../providers/logger/ILogger.js";
import { ICommandService } from "../services/commandService/ICommandService.js";
import { IConfig } from "../services/config/IConfig.js";
import { IJWT } from "../services/jwt/IJwt.js";
import { IActionPayload } from "./IActionPayload.js";
import { IFilter } from "./IFilter.js";
import { ISession } from "./ISession.js";
import { WrappedCallback } from "./wrappedCallback.js";
export declare class NeruSession implements ISession {
    id: string;
    config: IConfig;
    jwt: IJWT;
    bridge: IBridge;
    logger: ILogger;
    commandService: ICommandService;
    eventEmitter: IEventEmitter;
    constructor(commandService: ICommandService, bridge: IBridge, config: IConfig, jwt: IJWT, id: string);
    emitSessionCreatedEvent(ttl: number): Promise<void>;
    createUUID(): string;
    getToken(): string;
    log(level: string, message: string, context?: ILogContext): void;
    wrapCallback(route: string, filters: IFilter[]): WrappedCallback;
    constructCommandHeaders(): Record<string, string>;
    constructRequestHeaders(): Record<string, string>;
    executeAction<T, K>(actionPayload: IActionPayload<T>, method: string): Promise<K>;
}
//# sourceMappingURL=neruSession.d.ts.map