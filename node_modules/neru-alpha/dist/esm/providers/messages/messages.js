import { RequestInterface } from "../../session/requestInterface.js";
import { MessageActions } from "./messageActions.js";
import { VonageAPI } from "../vonageAPI/vonageAPI.js";
import { ActionPayload } from "../../session/actionPayload.js";
import { RequestInterfaceForCallbacks } from "../../session/requestInterfaceForCallbacks.js";
import { UnsubscribeEventsPayload } from "./contracts/unsubscribeEventsPayload.js";
import { ListenEventsPayload } from "./contracts/listenEventsPayload.js";
import { SendTextPayload } from "./contracts/sendTextPayload.js";
import { SendImagePayload } from "./contracts/sendImagePayload.js";
import { ListenMessagesPayload } from "./contracts/listenMessagesPayload.js";
var Messages = /** @class */ (function () {
    function Messages(session, regionURL) {
        if (regionURL === void 0) { regionURL = null; }
        this.regionURL = "https://api.nexmo.com";
        this.provider = "vonage-messaging";
        this.session = session;
        this.vonageAPI = new VonageAPI(this.session);
        if (regionURL != null) {
            this.regionURL = regionURL;
        }
    }
    Messages.prototype.send = function (message) {
        var url = "".concat(this.regionURL, "/v1/messages");
        var method = "POST";
        return this.vonageAPI.invoke(url, method, message);
    };
    Messages.prototype.sendText = function (from, to, message) {
        var payload = new SendTextPayload(from, to, message);
        var url = "".concat(this.regionURL, "/v0.1/messages");
        var method = "POST";
        return this.vonageAPI.invoke(url, method, payload);
    };
    Messages.prototype.sendImage = function (from, to, imageContent) {
        var payload = new SendImagePayload(from, to, imageContent);
        var url = "".concat(this.regionURL, "/v0.1/messages");
        var method = "POST";
        return this.vonageAPI.invoke(url, method, payload);
    };
    Messages.prototype.listenMessages = function (from, to, callback) {
        var payload = new ListenMessagesPayload(from, to, this.session.wrapCallback(callback, []));
        var action = new ActionPayload(this.provider, MessageActions.SubscribeInboundMessages, payload);
        return new RequestInterfaceForCallbacks(this.session, action);
    };
    Messages.prototype.listenEvents = function (from, to, callback) {
        var payload = new ListenEventsPayload(from, to, this.session.wrapCallback(callback, []));
        var action = new ActionPayload(this.provider, MessageActions.SubscribeInboundEvents, payload);
        return new RequestInterfaceForCallbacks(this.session, action);
    };
    // v1
    Messages.prototype.onMessage = function (callback, from, to) {
        var payload = new ListenMessagesPayload(from, to, this.session.wrapCallback(callback, []));
        var action = new ActionPayload(this.provider, MessageActions.SubscribeInboundMessages, payload);
        return new RequestInterfaceForCallbacks(this.session, action);
    };
    // v1
    Messages.prototype.onMessageEvents = function (callback, from, to) {
        var payload = new ListenEventsPayload(from, to, this.session.wrapCallback(callback, []));
        var action = new ActionPayload(this.provider, MessageActions.SubscribeInboundEvents, payload);
        return new RequestInterfaceForCallbacks(this.session, action);
    };
    Messages.prototype.unsubscribeEvents = function (id) {
        var payload = new UnsubscribeEventsPayload(id);
        var action = new ActionPayload(this.provider, MessageActions.UnsubscribeEvents, payload);
        return new RequestInterface(this.session, action);
    };
    return Messages;
}());
export { Messages };
//# sourceMappingURL=messages.js.map