import { RequestInterface } from '../../session/requestInterface.js';
import { RequestInterfaceForCallbacks } from '../../session/requestInterfaceForCallbacks.js';
import { InvokePayload } from '../vonageAPI/contracts/invokePayload.js';
import { IBaseMessage } from './contracts/IBaseMessage.js';
import { IMessageContact } from './contracts/IMessageContact.js';
import { ISendImageContent } from './contracts/ISendImageContent.js';
import { SendImagePayload } from './contracts/sendImagePayload.js';
import { SendTextPayload } from './contracts/sendTextPayload.js';
import { UnsubscribeEventsPayload } from './contracts/unsubscribeEventsPayload.js';
import { SendResponse } from './contracts/sendResponse.js';
export interface IMessages {
    send(message: IBaseMessage): RequestInterface<InvokePayload<IBaseMessage>, SendResponse>;
    sendText(from: IMessageContact, to: IMessageContact, message: string): RequestInterface<InvokePayload<SendTextPayload>, SendResponse>;
    sendImage(from: IMessageContact, to: IMessageContact, imageContent: ISendImageContent): RequestInterface<InvokePayload<SendImagePayload>, SendResponse>;
    listenMessages(from: IMessageContact, to: IMessageContact, callback: string): RequestInterfaceForCallbacks;
    listenEvents(from: IMessageContact, to: IMessageContact, callback: string): RequestInterfaceForCallbacks;
    onMessage(callback: string, from: IMessageContact, to: IMessageContact): RequestInterfaceForCallbacks;
    onMessageEvents(callback: string, from: IMessageContact, to: IMessageContact): RequestInterfaceForCallbacks;
    unsubscribeEvents(id: string): RequestInterface<UnsubscribeEventsPayload, string>;
}
//# sourceMappingURL=IMessages.d.ts.map