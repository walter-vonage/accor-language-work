import { RequestInterface } from '../../session/requestInterface.js';
import { SchedulerActions } from './schedulerActions.js';
import { ActionPayload } from '../../session/actionPayload.js';
import { StartAtPayload } from './contracts/startAtPayload.js';
import { SchedulerPayload } from './contracts/schedulerPayload.js';
import { RequestInterfaceForCallbacks } from '../../session/requestInterfaceForCallbacks.js';
import { ListAllPayload } from './contracts/listAllPayload.js';
var Scheduler = /** @class */ (function () {
    function Scheduler(session) {
        this.provider = 'vonage-scheduler';
        this.session = session;
        this.bridge = session.bridge;
    }
    Scheduler.prototype.startAt = function (params) {
        if (params.id != null && this.bridge.testRegEx(params.id, '^[a-zA-Z0-9][a-zA-Z0-9-_]*$') != true) {
            throw new Error("Error: The input does not match the required pattern ^[a-zA-Z0-9][a-zA-Z0-9-_]*$. Please enter a string that starts with a letter or a digit, and contains only letters, digits, hyphens, and underscores.");
        }
        var startAtPayload = new StartAtPayload();
        startAtPayload.startAt = params.startAt;
        startAtPayload.callback = this.session.wrapCallback(params.callback, []);
        if (params.payload != null) {
            startAtPayload.payload = params.payload;
        }
        if (params.interval != null) {
            startAtPayload.interval = params.interval;
        }
        if (params.id != null) {
            startAtPayload.id = params.id;
        }
        var action = new ActionPayload(this.provider, SchedulerActions.Create, startAtPayload);
        return new RequestInterfaceForCallbacks(this.session, action);
    };
    Scheduler.prototype.listAll = function (size, cursor) {
        if (size === void 0) { size = 10; }
        var payload = new ListAllPayload(size, cursor);
        var action = new ActionPayload(this.provider, SchedulerActions.List, payload);
        return new RequestInterface(this.session, action);
    };
    Scheduler.prototype.get = function (scheduleId) {
        var payload = new SchedulerPayload(scheduleId);
        var action = new ActionPayload(this.provider, SchedulerActions.Get, payload);
        return new RequestInterface(this.session, action);
    };
    Scheduler.prototype.cancel = function (scheduleId) {
        var payload = new SchedulerPayload(scheduleId);
        var action = new ActionPayload(this.provider, SchedulerActions.Cancel, payload);
        return new RequestInterface(this.session, action);
    };
    return Scheduler;
}());
export { Scheduler };
//# sourceMappingURL=scheduler.js.map