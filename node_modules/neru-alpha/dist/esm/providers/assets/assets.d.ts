import { IConfig } from "../../services/config/IConfig.js";
import { ISession } from "../../session/ISession";
import { IAssets } from "./IAssets.js";
import { DirectoryPayload } from "./contracts/directoryPayload.js";
import { RemoveAssetPayload } from "./contracts/removeAssetPayload.js";
import { ListAssetsPayload } from "./contracts/listAssetsPayload.js";
import { IBridge } from "../../IBridge.js";
import { RequestInterfaceWithParams } from "../../session/requestInterfaceWithParams.js";
import { LinkPayload } from "./contracts/linkPayload.js";
import { AssetLinkResponse } from "./contracts/assetLinkResponse.js";
import { AssetListResponse } from "./contracts/assetListResponse.js";
import { FormDataObject } from "../../request/formDataObject.js";
import { FileRetentionPeriod } from "./fileRetentionPeriod.js";
export declare class Assets implements IAssets {
    config: IConfig;
    provider: string;
    session: ISession;
    bridge: IBridge;
    constructor(session: ISession);
    createDir(name: string): RequestInterfaceWithParams<DirectoryPayload, null>;
    remove(remoteFilePath: string, recursive?: boolean): RequestInterfaceWithParams<RemoveAssetPayload, null>;
    getRemoteFile(remoteFilePath: string): RequestInterfaceWithParams<null, string>;
    generateLink(remoteFilePath: string, duration?: string): RequestInterfaceWithParams<LinkPayload, AssetLinkResponse>;
    uploadFiles(localFilePaths: string[], remoteDir: string, retentionPeriod?: FileRetentionPeriod): RequestInterfaceWithParams<Record<string, any>, null>;
    uploadData(data: any[], remoteDir: string, filenames?: string[], retentionPeriod?: FileRetentionPeriod): RequestInterfaceWithParams<FormDataObject[], null>;
    list(remotePath: string, recursive?: boolean, limit?: number): RequestInterfaceWithParams<ListAssetsPayload, AssetListResponse>;
}
//# sourceMappingURL=assets.d.ts.map