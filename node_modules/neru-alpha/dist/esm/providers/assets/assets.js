import { DirectoryPayload } from "./contracts/directoryPayload.js";
import { RemoveAssetPayload } from "./contracts/removeAssetPayload.js";
import { ListAssetsPayload } from "./contracts/listAssetsPayload.js";
import { AssetsActions } from "./assetsActions.js";
import { RequestMethods } from "../../request/requestMethods.js";
import { RequestInterfaceWithParams } from "../../session/requestInterfaceWithParams.js";
import { RequestParams } from "../../request/requestParams.js";
import { LinkPayload } from "./contracts/linkPayload.js";
import { FormDataObject } from "../../request/formDataObject.js";
var Assets = /** @class */ (function () {
    function Assets(session) {
        this.provider = "vonage-assets";
        this.session = session;
        this.bridge = session.bridge;
        this.config = session.config;
    }
    Assets.prototype.createDir = function (name) {
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.POST;
        requestParams.data = new DirectoryPayload(name);
        requestParams.url = this.config.getExecutionUrl(this.provider, AssetsActions.Mkdir);
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Assets.prototype.remove = function (remoteFilePath, recursive) {
        if (recursive === void 0) { recursive = false; }
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.POST;
        requestParams.data = new RemoveAssetPayload(remoteFilePath, recursive);
        requestParams.url = this.config.getExecutionUrl(this.provider, AssetsActions.Remove);
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Assets.prototype.getRemoteFile = function (remoteFilePath) {
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.GET;
        requestParams.url = this.config.getExecutionUrl(this.provider, AssetsActions.Binary, { key: remoteFilePath });
        requestParams.headers = this.session.constructRequestHeaders();
        requestParams.responseType = "stream" /* ResponseTypes.STREAM */;
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Assets.prototype.generateLink = function (remoteFilePath, duration) {
        if (duration === void 0) { duration = "5m"; }
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.POST;
        requestParams.data = new LinkPayload(remoteFilePath, duration);
        requestParams.url = this.config.getExecutionUrl(this.provider, AssetsActions.Link);
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Assets.prototype.uploadFiles = function (localFilePaths, remoteDir, retentionPeriod) {
        var streams = [];
        for (var i = 0; i < localFilePaths.length; i++) {
            streams.push(this.bridge.createReadStream(localFilePaths[i]));
        }
        return this.uploadData(streams, remoteDir, null, retentionPeriod);
    };
    Assets.prototype.uploadData = function (data, remoteDir, filenames, retentionPeriod) {
        var url = this.config.getExecutionUrl(this.provider, AssetsActions.Copy, {
            dst: remoteDir,
            retention: retentionPeriod,
        });
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.POST;
        requestParams.data = [];
        for (var i = 0; i < data.length; i++) {
            var formData = new FormDataObject();
            formData.name = "file[".concat(i, "]");
            formData.value = data[i];
            if (filenames != null && filenames[i] != null) {
                formData.filename = filenames[i];
            }
            requestParams.data.push(formData);
        }
        requestParams.url = url;
        requestParams.headers = this.session.constructRequestHeaders();
        requestParams.headers["Content-Type"] = "multipart/form-data";
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Assets.prototype.list = function (remotePath, recursive, limit) {
        if (recursive === void 0) { recursive = false; }
        if (limit === void 0) { limit = 1000; }
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.POST;
        requestParams.data = new ListAssetsPayload(remotePath, recursive, limit);
        requestParams.url = this.config.getExecutionUrl(this.provider, AssetsActions.List);
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    return Assets;
}());
export { Assets };
//# sourceMappingURL=assets.js.map