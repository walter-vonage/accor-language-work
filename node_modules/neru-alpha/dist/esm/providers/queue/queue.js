import { CreateQueuePayload } from "./contracts/createQueuePayload.js";
import { QueueRate } from "./contracts/queueRate.js";
import { RequestParams } from "../../request/requestParams.js";
import { RequestMethods } from "../../request/requestMethods.js";
import { RequestInterfaceWithParams } from "../../session/requestInterfaceWithParams.js";
import { UpdateQueuePayload } from "./contracts/updateQueuePayload.js";
var Queue = /** @class */ (function () {
    function Queue(session) {
        this.provider = "queue-service";
        this.session = session;
        this.bridge = session.bridge;
        this.config = session.config;
    }
    Queue.prototype.createQueue = function (name, callback, options) {
        var payload = new CreateQueuePayload();
        payload.name = name;
        payload.callback = this.session.wrapCallback(callback, []);
        payload.active = options.active;
        payload.rate = new QueueRate();
        payload.rate.maxInflight = options.maxInflight;
        payload.rate.msgPerSecond = options.msgPerSecond;
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.POST;
        requestParams.data = payload;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue");
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Queue.prototype.updateQueue = function (queueName, options) {
        var payload = new UpdateQueuePayload();
        payload.rate = new QueueRate();
        payload.rate.maxInflight = options.maxInflight;
        payload.rate.msgPerSecond = options.msgPerSecond;
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.POST;
        requestParams.data = payload;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue/".concat(queueName));
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Queue.prototype.list = function () {
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.GET;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue");
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Queue.prototype.getQueueDetails = function (name) {
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.GET;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue/".concat(name));
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Queue.prototype.deleteQueue = function (name) {
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.DEL;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue/".concat(name));
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Queue.prototype.pauseQueue = function (name) {
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.PUT;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue/".concat(name, "/pause"));
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Queue.prototype.resumeQueue = function (name) {
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.PUT;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue/".concat(name, "/resume"));
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Queue.prototype.enqueue = function (name, data) {
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.POST;
        requestParams.data = data;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue/".concat(name, "/enqueue"));
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Queue.prototype.enqueueSingle = function (name, data) {
        return this.enqueue(name, [data]);
    };
    Queue.prototype.deadLetterList = function (name) {
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.GET;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue/".concat(name, "/deadletter"));
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    Queue.prototype.deadLetterDequeue = function (name, count) {
        if (count === void 0) { count = 1; }
        var requestParams = new RequestParams();
        requestParams.method = RequestMethods.POST;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue/".concat(name, "/deadletter/pop"), { count: this.bridge.jsonStringify(count) });
        requestParams.headers = this.session.constructRequestHeaders();
        return new RequestInterfaceWithParams(this.session, requestParams);
    };
    return Queue;
}());
export { Queue };
//# sourceMappingURL=queue.js.map