import { VonageAPI } from '../vonageAPI/vonageAPI.js';
var Users = /** @class */ (function () {
    function Users(session) {
        this.session = session;
        this.bridge = session.bridge;
        this.vonageAPI = new VonageAPI(this.session);
        this.baseUrl = 'https://api.nexmo.com/v0.3';
    }
    Users.prototype.getUsers = function (page_size, order, pageUrl) {
        var url = '';
        if (pageUrl != null) {
            url = pageUrl;
        }
        else {
            var options = {};
            if (page_size) {
                options.page_size = page_size;
            }
            if (order) {
                options.order = order;
            }
            url = this.buildUrl("".concat(this.baseUrl, "/users"), options);
        }
        var method = 'GET';
        return this.vonageAPI.invoke(url, method, null);
    };
    Users.prototype.getUser = function (user_id) {
        var url = "".concat(this.baseUrl, "/users/").concat(user_id);
        var method = 'GET';
        return this.vonageAPI.invoke(url, method, null);
    };
    Users.prototype.createUser = function (createUserPayload) {
        var url = "".concat(this.baseUrl, "/users");
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, createUserPayload);
    };
    Users.prototype.updateUser = function (user_id, updateUserPayload) {
        var url = "".concat(this.baseUrl, "/users/").concat(user_id);
        var method = 'PATCH';
        return this.vonageAPI.invoke(url, method, updateUserPayload);
    };
    Users.prototype.deleteUser = function (user_id) {
        var url = "".concat(this.baseUrl, "/users/").concat(user_id);
        var method = 'DELETE';
        return this.vonageAPI.invoke(url, method, null);
    };
    Users.prototype.buildUrl = function (baseUrl, options) {
        var keys = this.bridge.getObjectKeys(options);
        var queryString = '';
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = options[key];
            queryString += "".concat(key, "=").concat(value);
            if (i + 1 < keys.length) {
                queryString += '&';
            }
        }
        if (queryString.length > 0) {
            return "".concat(baseUrl, "?").concat(queryString);
        }
        return baseUrl;
    };
    return Users;
}());
export { Users };
//# sourceMappingURL=users.js.map