var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Conversation } from "./conversation.js";
import { VonageAPI } from "../vonageAPI/vonageAPI.js";
import { ActionPayload } from "../../session/actionPayload.js";
import { VoiceActions } from "./voiceActions.js";
import { RequestInterfaceForCallbacks } from "../../session/requestInterfaceForCallbacks.js";
import { CreateConversationPayload } from "./contracts/createConversationPayload.js";
import { VapiAnswerCallBack } from "./contracts/vapiAnswerCallBack.js";
import { VapiEventCallBackPayload } from "./contracts/vapiEventCallBackPayload.js";
import { VapiCreateCallPayload } from "./contracts/vapiCreateCallPayload.js";
import { OnInboundCallPayload } from "./contracts/onInboundCallPayload.js";
import { RequestParams } from "../../request/requestParams.js";
import { CreateVonageTokenParams } from "../../services/jwt/createVonageTokenParams.js";
import { Assets } from "../assets/assets.js";
import { RequestMethods } from "../../request/requestMethods.js";
var Voice = /** @class */ (function () {
    function Voice(session, regionURL) {
        if (regionURL === void 0) { regionURL = null; }
        this.provider = "vonage-voice";
        this.regionURL = "https://api.nexmo.com";
        this.session = session;
        this.bridge = session.bridge;
        this.assetsAPI = new Assets(session);
        this.vonageApi = new VonageAPI(this.session);
        if (regionURL != null) {
            this.regionURL = regionURL;
        }
    }
    Voice.prototype.onInboundCall = function (callback, to, from) {
        if (from === void 0) { from = null; }
        if (to.type == null) {
            to.type = "phone";
        }
        if (from != null && from.type == null) {
            from.type = "phone";
        }
        var payload = new OnInboundCallPayload(this.session.wrapCallback(callback, []), to, from);
        var action = new ActionPayload(this.provider, VoiceActions.ConversationSubscribeInboundCall, payload);
        return new RequestInterfaceForCallbacks(this.session, action);
    };
    Voice.prototype.createConversation = function (name, displayName) {
        if (name === void 0) { name = null; }
        if (displayName === void 0) { displayName = null; }
        return __awaiter(this, void 0, void 0, function () {
            var conversationName, conversationDisplayName, conversationId, payload, url, method, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        conversationName = name;
                        conversationDisplayName = displayName;
                        if (name == null) {
                            conversationId = this.bridge.substring(this.session.createUUID(), 0, 5);
                            conversationName = "name_cs_".concat(conversationId);
                        }
                        if (displayName == null) {
                            conversationDisplayName = "dn_".concat(conversationName, ";");
                        }
                        payload = new CreateConversationPayload(conversationName, conversationDisplayName);
                        url = "https://api.nexmo.com/v0.3/conversations";
                        method = RequestMethods.POST;
                        return [4 /*yield*/, this.vonageApi
                                .invoke(url, method, payload)
                                .execute()];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, new Conversation(res.id, this.session)];
                }
            });
        });
    };
    Voice.prototype.onVapiAnswer = function (callback) {
        var payload = new VapiAnswerCallBack(this.session.wrapCallback(callback, []));
        var action = new ActionPayload(this.provider, VoiceActions.VapiSubscribeInboundCall, payload);
        return new RequestInterfaceForCallbacks(this.session, action);
    };
    Voice.prototype.onVapiEvent = function (params) {
        var payload = new VapiEventCallBackPayload();
        payload.callback = this.session.wrapCallback(params.callback, []);
        if (params.conversationID == null && params.vapiUUID == null) {
            throw new Error("Either conversationID or vapiUUID is required");
        }
        if (params.vapiUUID != null) {
            payload.vapiID = params.vapiUUID;
        }
        else if (params.conversationID != null) {
            payload.conversationID = params.conversationID;
        }
        var action = new ActionPayload(this.provider, VoiceActions.VapiSubscribeEvent, payload);
        return new RequestInterfaceForCallbacks(this.session, action);
    };
    Voice.prototype.vapiCreateCall = function (from, to, ncco, options) {
        var vapiCreateCallPayload = new VapiCreateCallPayload(from, to, ncco, options);
        var method = RequestMethods.POST;
        return this.vonageApi.invoke("".concat(this.regionURL, "/v1/calls"), method, vapiCreateCallPayload);
    };
    Voice.prototype.uploadNCCO = function (uuid, ncco) {
        var method = RequestMethods.PUT;
        return this.vonageApi.invoke("".concat(this.regionURL, "/v1/calls/").concat(uuid), method, ncco);
    };
    Voice.prototype.getConversation = function (id) {
        return new Conversation(id, this.session);
    };
    Voice.prototype.getCallRecording = function (recordingUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var params, createVonageTokenParams, token, headers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = new RequestParams();
                        params.method = RequestMethods.GET;
                        params.url = recordingUrl;
                        createVonageTokenParams = new CreateVonageTokenParams();
                        createVonageTokenParams.exp = this.bridge.getSystemTime() + 60 * 60;
                        token = this.session.jwt.createVonageToken(createVonageTokenParams);
                        headers = {};
                        headers["Authorization"] = "Bearer ".concat(token);
                        params.headers = headers;
                        params.responseType = "stream" /* ResponseTypes.STREAM */;
                        return [4 /*yield*/, this.bridge.request(params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Voice.prototype.uploadCallRecording = function (recordingUrl, assetsPath) {
        return __awaiter(this, void 0, void 0, function () {
            var stream, pathObject, data, fileNames;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCallRecording(recordingUrl)];
                    case 1:
                        stream = _a.sent();
                        pathObject = this.bridge.parsePath(assetsPath);
                        data = [stream];
                        fileNames = [pathObject.base];
                        return [4 /*yield*/, this.assetsAPI.uploadData(data, pathObject.dir, fileNames).execute()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Voice;
}());
export { Voice };
//# sourceMappingURL=voice.js.map