import { RequestInterface } from '../../session/requestInterface.js';
import { RequestInterfaceForCallbacks } from '../../session/requestInterfaceForCallbacks.js';
import { InvokePayload } from '../vonageAPI/contracts/invokePayload.js';
import { VapiCreateCallPayload } from './contracts/vapiCreateCallPayload.js';
import { Conversation } from './conversation.js';
import { IVapiEventParams } from './contracts/IVapiEventParams.js';
import { IChannelPhoneEndpoint } from './contracts/IChannelPhoneEndpoint.js';
import { VapiCreateCallResponse } from './contracts/vapiCreateCallResponse.js';
import { IVapiCreateCallOptions } from './contracts/IVapiCreateCallOptions.js';
export interface IVoice {
    onInboundCall(callback: string, to: IChannelPhoneEndpoint, from?: IChannelPhoneEndpoint): RequestInterfaceForCallbacks;
    createConversation(name?: string, displayName?: string): Promise<Conversation>;
    onVapiAnswer(callback: string): RequestInterfaceForCallbacks;
    onVapiEvent(params: IVapiEventParams): RequestInterfaceForCallbacks;
    vapiCreateCall(from: IChannelPhoneEndpoint, to: IChannelPhoneEndpoint[], ncco: Record<string, any>[], options?: IVapiCreateCallOptions): RequestInterface<InvokePayload<VapiCreateCallPayload>, VapiCreateCallResponse>;
    uploadNCCO<T>(uuid: string, ncco: T): RequestInterface<InvokePayload<T>, string>;
    getConversation(id: string): Conversation;
    getCallRecording(recordingUrl: string): Promise<any>;
    uploadCallRecording(recordingUrl: string, assetsPath: string): Promise<void>;
}
//# sourceMappingURL=IVoice.d.ts.map