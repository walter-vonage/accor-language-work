import { CSEvents } from './csEvents.js';
import { VoiceActions } from './voiceActions.js';
import { VonageAPI } from '../vonageAPI/vonageAPI.js';
import { Filter } from '../../session/filter.js';
import { ActionPayload } from '../../session/actionPayload.js';
import { RequestInterfaceForCallbacks } from '../../session/requestInterfaceForCallbacks.js';
import { TransferMemberPayload } from './contracts/transferMemberPayload.js';
import { SayStopPayload } from './contracts/sayStopPayload.js';
import { PlayStreamPayload } from './contracts/playStreamPayload.js';
import { PlayStopPayload } from './contracts/playStopPayload.js';
import { Reason } from './contracts/reason.js';
import { DeleteMemberPayload } from './contracts/deleteMemberPayload.js';
import { SayTextPayload } from './contracts/sayTextPayload.js';
import { EarmuffPayload } from './contracts/earmuffPayload.js';
import { AudioSettings } from './contracts/audioSettings.js';
import { Media } from './contracts/media.js';
import { Channel } from './contracts/channel.js';
import { AcceptInboundCallPayload } from './contracts/acceptInboundCallPayload.js';
import { InviteMemberPayload } from './contracts/inviteMemberPayload.js';
import { MutePayload } from './contracts/mutePayload.js';
import { ConversationPayloadWithCallback } from './contracts/conversationPayloadWithCallback.js';
import { AddUserPayload } from './contracts/addUserPayload.js';
var Conversation = /** @class */ (function () {
    function Conversation(id, session) {
        this.provider = 'vonage-voice';
        this.id = id;
        this.session = session;
        this.vonageAPI = new VonageAPI(this.session);
        this.baseUrl = 'https://api.nexmo.com/v0.3';
    }
    Conversation.prototype.acceptInboundCall = function (event) {
        var audioSettings = new AudioSettings(true, false, false);
        var media = new Media(audioSettings, true);
        var channel = new Channel();
        channel.id = event.body.channel.id;
        channel.type = event.body.channel.type;
        channel.to = event.body.channel.to;
        channel.from = event.body.channel.from;
        var payload = new AcceptInboundCallPayload(event.body.user.id, event.from, channel, media);
        var url = "".concat(this.baseUrl, "/conversations/").concat(this.id, "/members");
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    };
    Conversation.prototype.inviteMember = function (name, channel) {
        var payload = new InviteMemberPayload(name, channel);
        var url = "".concat(this.baseUrl, "/conversations/").concat(this.id, "/members");
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    };
    Conversation.prototype.addUser = function (name) {
        var payload = new AddUserPayload(name);
        var url = "".concat(this.baseUrl, "/users");
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    };
    Conversation.prototype.transferMember = function (userId, legId) {
        var payload = new TransferMemberPayload(userId, legId);
        var url = "".concat(this.baseUrl, "/conversations/").concat(this.id, "/members");
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    };
    Conversation.prototype.deleteMember = function (memberId) {
        //TODO: magic numbers
        var reason = new Reason('123', 'leaving conversation');
        var payload = new DeleteMemberPayload(reason);
        var url = "".concat(this.baseUrl, "/conversations/").concat(this.id, "/members/").concat(memberId);
        var method = "PATCH";
        return this.vonageAPI.invoke(url, method, payload);
    };
    Conversation.prototype.sayText = function (body, to) {
        if (to === void 0) { to = null; }
        if (body.level == null) {
            body.level = 1;
        }
        if (body.loop == null) {
            body.loop = 1;
        }
        if (body.voice_name == null) {
            body.voice_name = 'Amy';
        }
        if (body.queue == null) {
            body.queue = false;
        }
        if (body.ssml == null) {
            body.ssml = false;
        }
        var payload = new SayTextPayload(body, to);
        var method = 'POST';
        var url = "".concat(this.baseUrl, "/conversations/").concat(this.id, "/events");
        return this.vonageAPI.invoke(url, method, payload);
    };
    Conversation.prototype.sayStop = function (sayId, to) {
        if (to === void 0) { to = null; }
        var payload = new SayStopPayload(sayId, to);
        var url = "".concat(this.baseUrl, "/conversations/").concat(this.id, "/events");
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    };
    Conversation.prototype.playStream = function (body, to) {
        if (to === void 0) { to = null; }
        if (body.loop == null) {
            body.loop = 1;
        }
        if (body.level == null) {
            body.level = 1;
        }
        var payload = new PlayStreamPayload(body, to);
        var url = "".concat(this.baseUrl, "/conversations/").concat(this.id, "/events");
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    };
    Conversation.prototype.playStop = function (playId, to) {
        if (to === void 0) { to = null; }
        var payload = new PlayStopPayload(playId, to);
        var url = "".concat(this.baseUrl, "/conversations/").concat(this.id, "/events");
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    };
    Conversation.prototype.earmuff = function (enable, to, from) {
        if (from === void 0) { from = null; }
        var payload = new EarmuffPayload(enable, to, from);
        var url = "".concat(this.baseUrl, "/conversations/").concat(this.id, "/events");
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    };
    Conversation.prototype.earmuffOn = function (to, from) {
        if (from === void 0) { from = null; }
        return this.earmuff(true, to, from);
    };
    Conversation.prototype.earmuffOff = function (to, from) {
        if (from === void 0) { from = null; }
        return this.earmuff(false, to, from);
    };
    Conversation.prototype.mute = function (enable, to, from) {
        if (from === void 0) { from = null; }
        var payload = new MutePayload(enable, to, from);
        var url = "".concat(this.baseUrl, "/conversations/").concat(this.id, "/events");
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    };
    Conversation.prototype.muteOn = function (to, from) {
        if (from === void 0) { from = null; }
        return this.mute(true, to, from);
    };
    Conversation.prototype.muteOff = function (to, from) {
        if (from === void 0) { from = null; }
        return this.mute(false, to, from);
    };
    Conversation.prototype.listenForEvents = function (callback, filters) {
        var payload = new ConversationPayloadWithCallback(this.session.wrapCallback(callback, filters), this.id);
        var action = new ActionPayload(this.provider, VoiceActions.ConversationSubscribeEvent, payload);
        return new RequestInterfaceForCallbacks(this.session, action);
    };
    Conversation.prototype.onConversationCreated = function (callback) {
        var filters = [
            new Filter('type', 'contains', [CSEvents.ConversationCreated]),
            new Filter('body.name', 'contains', [this.name]),
        ];
        return this.listenForEvents(callback, filters);
    };
    Conversation.prototype.onSay = function (callback) {
        var filters = [
            new Filter('type', 'contains', [CSEvents.AudioSay]),
            new Filter("conversation_id", "contains", [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    };
    Conversation.prototype.onPlay = function (callback) {
        var filters = [
            new Filter('type', 'contains', [CSEvents.AudioPlay]),
            new Filter('conversation_id', 'contains', [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    };
    Conversation.prototype.onSayStop = function (callback) {
        var filters = [
            new Filter('type', 'contains', [CSEvents.AudioSayStop]),
            new Filter("conversation_id", "contains", [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    };
    Conversation.prototype.onPlayStop = function (callback) {
        var filters = [
            new Filter('type', 'contains', [CSEvents.AudioPlayStop]),
            new Filter("conversation_id", "contains", [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    };
    Conversation.prototype.onSayDone = function (callback) {
        var filters = [
            new Filter('type', 'contains', [CSEvents.AudioSayDone]),
            new Filter("conversation_id", "contains", [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    };
    Conversation.prototype.onPlayDone = function (callback) {
        var filters = [
            new Filter('type', 'contains', [CSEvents.AudioPlayDone]),
            new Filter("conversation_id", "contains", [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    };
    Conversation.prototype.onLegStatusUpdate = function (callback) {
        var filters = [
            new Filter('type', 'contains', [CSEvents.LegStatusUpdate]),
            new Filter("conversation_id", "contains", [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    };
    Conversation.prototype.onMemberJoined = function (callback, memberName) {
        if (memberName === void 0) { memberName = null; }
        var filters = [
            new Filter('type', 'contains', [CSEvents.MemberJoined]),
            new Filter("conversation_id", "contains", [this.id]),
        ];
        if (memberName != null) {
            filters.push(new Filter("body.user.name", "contains", [memberName]));
        }
        return this.listenForEvents(callback, filters);
    };
    Conversation.prototype.onMemberInvited = function (callback, memberName) {
        if (memberName === void 0) { memberName = null; }
        var filters = [
            new Filter('type', 'contains', [CSEvents.MemberInvited]),
            new Filter("conversation_id", "contains", [this.id]),
        ];
        if (memberName != null) {
            filters.push(new Filter('body.user.name', 'contains', [memberName]));
        }
        return this.listenForEvents(callback, filters);
    };
    Conversation.prototype.onMemberLeft = function (callback, memberName) {
        if (memberName === void 0) { memberName = null; }
        var filters = [
            new Filter('type', 'contains', [CSEvents.MemberLeft]),
            new Filter("conversation_id", "contains", [this.id]),
        ];
        if (memberName != null) {
            filters.push(new Filter('body.user.name', 'contains', [memberName]));
        }
        return this.listenForEvents(callback, filters);
    };
    Conversation.prototype.onDTMF = function (callback) {
        var filters = [
            new Filter('type', 'contains', [CSEvents.AudioDTMF]),
            new Filter("conversation_id", "contains", [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    };
    return Conversation;
}());
export { Conversation };
//# sourceMappingURL=conversation.js.map