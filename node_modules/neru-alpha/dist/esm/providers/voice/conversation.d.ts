import { RequestInterface } from '../../session/requestInterface.js';
import { InvokePayload } from '../vonageAPI/contracts/invokePayload.js';
import { IConversation } from './IConversation.js';
import { ISession } from '../../session/ISession.js';
import { RequestInterfaceForCallbacks } from '../../session/requestInterfaceForCallbacks.js';
import { IFilter } from '../../session/IFilter.js';
import { TransferMemberPayload } from './contracts/transferMemberPayload.js';
import { SayStopPayload } from './contracts/sayStopPayload.js';
import { IPlayStreamBody } from './contracts/IPlayStreamBody.js';
import { PlayStreamPayload } from './contracts/playStreamPayload.js';
import { PlayStopPayload } from './contracts/playStopPayload.js';
import { DeleteMemberPayload } from './contracts/deleteMemberPayload.js';
import { SayTextPayload } from './contracts/sayTextPayload.js';
import { EarmuffPayload } from './contracts/earmuffPayload.js';
import { IChannel } from './contracts/IChannel.js';
import { IAcceptInboundCallEvent } from './contracts/IAcceptInboundCallEvent.js';
import { AcceptInboundCallPayload } from './contracts/acceptInboundCallPayload.js';
import { InviteMemberPayload } from './contracts/inviteMemberPayload.js';
import { MutePayload } from './contracts/mutePayload.js';
import { AddUserPayload } from './contracts/addUserPayload.js';
import { ISayTextBody } from './contracts/ISayTextBody.js';
import { AddUserResponse } from './contracts/addUserResponse.js';
import { MemberResponse } from './contracts/memberResponse.js';
import { EventResponse } from './contracts/eventResponse.js';
import { PlayStreamResponseBody } from './contracts/playStreamResponseBody.js';
import { PlayStreamStopResponseBody } from './contracts/playStreamStopResponseBody.js';
import { EarmuffResponseBody } from './contracts/earmuffResponseBody.js';
import { MuteResponseBody } from './contracts/muteResponseBody.js';
import { AudioSayResponseBody } from './contracts/audioSayResponseBody.js';
import { AudioSayStopResponseBody } from './contracts/audioSayStopResponseBody.js';
export declare class Conversation implements IConversation {
    id: string;
    name: string;
    private session;
    private vonageAPI;
    private baseUrl;
    private provider;
    constructor(id: string, session: ISession);
    acceptInboundCall(event: IAcceptInboundCallEvent): RequestInterface<InvokePayload<AcceptInboundCallPayload>, MemberResponse>;
    inviteMember(name: string, channel: IChannel): RequestInterface<InvokePayload<InviteMemberPayload>, MemberResponse>;
    addUser(name: string): RequestInterface<InvokePayload<AddUserPayload>, AddUserResponse>;
    transferMember(userId: string, legId: string): RequestInterface<InvokePayload<TransferMemberPayload>, MemberResponse>;
    deleteMember(memberId: string): RequestInterface<InvokePayload<DeleteMemberPayload>, MemberResponse>;
    sayText(body: ISayTextBody, to?: string): RequestInterface<InvokePayload<SayTextPayload>, EventResponse<AudioSayResponseBody>>;
    sayStop(sayId: string, to?: string): RequestInterface<InvokePayload<SayStopPayload>, EventResponse<AudioSayStopResponseBody>>;
    playStream(body: IPlayStreamBody, to?: string): RequestInterface<InvokePayload<PlayStreamPayload>, EventResponse<PlayStreamResponseBody>>;
    playStop(playId: string, to?: string): RequestInterface<InvokePayload<PlayStopPayload>, EventResponse<PlayStreamStopResponseBody>>;
    private earmuff;
    earmuffOn(to: string, from?: string): RequestInterface<InvokePayload<EarmuffPayload>, EventResponse<EarmuffResponseBody>>;
    earmuffOff(to: string, from?: string): RequestInterface<InvokePayload<EarmuffPayload>, EventResponse<EarmuffResponseBody>>;
    private mute;
    muteOn(to: string, from?: string): RequestInterface<InvokePayload<MutePayload>, EventResponse<MuteResponseBody>>;
    muteOff(to: string, from?: string): RequestInterface<InvokePayload<MutePayload>, EventResponse<MuteResponseBody>>;
    listenForEvents(callback: string, filters: IFilter[]): RequestInterfaceForCallbacks;
    onConversationCreated(callback: string): RequestInterfaceForCallbacks;
    onSay(callback: string): RequestInterfaceForCallbacks;
    onPlay(callback: string): RequestInterfaceForCallbacks;
    onSayStop(callback: string): RequestInterfaceForCallbacks;
    onPlayStop(callback: string): RequestInterfaceForCallbacks;
    onSayDone(callback: string): RequestInterfaceForCallbacks;
    onPlayDone(callback: string): RequestInterfaceForCallbacks;
    onLegStatusUpdate(callback: string): RequestInterfaceForCallbacks;
    onMemberJoined(callback: string, memberName?: string): RequestInterfaceForCallbacks;
    onMemberInvited(callback: string, memberName?: string): RequestInterfaceForCallbacks;
    onMemberLeft(callback: string, memberName?: string): RequestInterfaceForCallbacks;
    onDTMF(callback: string): RequestInterfaceForCallbacks;
}
//# sourceMappingURL=conversation.d.ts.map