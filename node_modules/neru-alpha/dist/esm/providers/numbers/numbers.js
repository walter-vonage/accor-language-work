import { VonageAPI } from '../vonageAPI/vonageAPI.js';
var Numbers = /** @class */ (function () {
    function Numbers(session) {
        this.session = session;
        this.bridge = session.bridge;
        this.vonageAPI = new VonageAPI(this.session);
        this.baseUrl = 'https://rest.nexmo.com/number';
        this.accountUrl = 'https://rest.nexmo.com/account/numbers';
    }
    Numbers.prototype.getNumbers = function (apiKey, apiSecret, getNumberOptions) {
        var url = "".concat(this.accountUrl, "?api_key=").concat(apiKey, "&api_secret=").concat(apiSecret);
        var options = {};
        if (getNumberOptions.application_id != null) {
            options.application_id = getNumberOptions.application_id;
        }
        if (getNumberOptions.has_application != null) {
            options.has_application = getNumberOptions.has_application;
        }
        if (getNumberOptions.country != null) {
            options.country = getNumberOptions.country;
        }
        if (getNumberOptions.pattern != null) {
            options.pattern = getNumberOptions.pattern;
        }
        if (getNumberOptions.search_pattern != null) {
            options.search_pattern = getNumberOptions.search_pattern;
        }
        if (getNumberOptions.size != null) {
            options.size = getNumberOptions.size;
        }
        if (getNumberOptions.index != null) {
            options.index = getNumberOptions.index;
        }
        url = this.buildUrl(url, options);
        var method = 'GET';
        return this.vonageAPI.invoke(url, method, null);
    };
    Numbers.prototype.searchNumbers = function (apiKey, apiSecret, searchNumberOptions) {
        var url = "".concat(this.baseUrl, "/search?api_key=").concat(apiKey, "&api_secret=").concat(apiSecret);
        var options = {};
        if (searchNumberOptions.country != null) {
            options.country = searchNumberOptions.country;
        }
        if (searchNumberOptions.type != null) {
            options.type = searchNumberOptions.type;
        }
        if (searchNumberOptions.pattern != null) {
            options.pattern = searchNumberOptions.pattern;
        }
        if (searchNumberOptions.search_pattern != null) {
            options.search_pattern = searchNumberOptions.search_pattern;
        }
        if (searchNumberOptions.features != null) {
            options.features = searchNumberOptions.features;
        }
        if (searchNumberOptions.size != null) {
            options.size = searchNumberOptions.size;
        }
        if (searchNumberOptions.index != null) {
            options.index = searchNumberOptions.index;
        }
        url = this.buildUrl(url, options);
        var method = 'GET';
        return this.vonageAPI.invoke(url, method, null);
    };
    Numbers.prototype.buyNumber = function (apiKey, apiSecret, numberOptions) {
        var url = "".concat(this.baseUrl, "/buy?api_key=").concat(apiKey, "&api_secret=").concat(apiSecret);
        var options = {};
        if (numberOptions.country != null) {
            options.country = numberOptions.country;
        }
        if (numberOptions.msisdn != null) {
            options.msisdn = numberOptions.msisdn;
        }
        if (numberOptions.target_api_key != null) {
            options.target_api_key = numberOptions.target_api_key;
        }
        url = this.buildUrl(url, options);
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, null);
    };
    Numbers.prototype.cancelNumber = function (apiKey, apiSecret, numberOptions) {
        var url = "".concat(this.baseUrl, "/cancel?api_key=").concat(apiKey, "&api_secret=").concat(apiSecret);
        var options = {};
        if (numberOptions.country != null) {
            options.country = numberOptions.country;
        }
        if (numberOptions.msisdn != null) {
            options.msisdn = numberOptions.msisdn;
        }
        if (numberOptions.target_api_key != null) {
            options.target_api_key = numberOptions.target_api_key;
        }
        url = this.buildUrl(url, options);
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, null);
    };
    Numbers.prototype.updateNumber = function (apiKey, apiSecret, updateNumberOptions) {
        var url = "".concat(this.baseUrl, "/update?api_key=").concat(apiKey, "&api_secret=").concat(apiSecret);
        var options = {};
        if (updateNumberOptions.country != null) {
            options.country = updateNumberOptions.country;
        }
        if (updateNumberOptions.msisdn != null) {
            options.msisdn = updateNumberOptions.msisdn;
        }
        if (updateNumberOptions.app_id != null) {
            options.app_id = updateNumberOptions.app_id;
        }
        if (updateNumberOptions.moHttpUrl != null) {
            options.moHttpUrl = updateNumberOptions.moHttpUrl;
        }
        if (updateNumberOptions.moSmppSysType != null) {
            options.moSmppSysType = updateNumberOptions.moSmppSysType;
        }
        if (updateNumberOptions.voiceCallbackType != null) {
            options.voiceCallbackType = updateNumberOptions.voiceCallbackType;
        }
        if (updateNumberOptions.voiceCallbackValue != null) {
            options.voiceCallbackValue = updateNumberOptions.voiceCallbackValue;
        }
        if (updateNumberOptions.voiceStatusCallback != null) {
            options.voiceStatusCallback = updateNumberOptions.voiceStatusCallback;
        }
        url = this.buildUrl(url, options);
        var method = 'POST';
        return this.vonageAPI.invoke(url, method, null);
    };
    Numbers.prototype.buildUrl = function (baseUrl, options) {
        var keys = this.bridge.getObjectKeys(options);
        var queryString = '';
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = options[key];
            queryString += "".concat(key, "=").concat(value);
            if (i + 1 < keys.length) {
                queryString += '&';
            }
        }
        if (queryString.length > 0) {
            return "".concat(baseUrl, "?").concat(queryString);
        }
        return baseUrl;
    };
    return Numbers;
}());
export { Numbers };
//# sourceMappingURL=numbers.js.map