"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Messages = void 0;
const requestInterface_js_1 = require("../../session/requestInterface.js");
const messageActions_js_1 = require("./messageActions.js");
const vonageAPI_js_1 = require("../vonageAPI/vonageAPI.js");
const actionPayload_js_1 = require("../../session/actionPayload.js");
const requestInterfaceForCallbacks_js_1 = require("../../session/requestInterfaceForCallbacks.js");
const unsubscribeEventsPayload_js_1 = require("./contracts/unsubscribeEventsPayload.js");
const listenEventsPayload_js_1 = require("./contracts/listenEventsPayload.js");
const sendTextPayload_js_1 = require("./contracts/sendTextPayload.js");
const sendImagePayload_js_1 = require("./contracts/sendImagePayload.js");
const listenMessagesPayload_js_1 = require("./contracts/listenMessagesPayload.js");
class Messages {
    constructor(session, regionURL = null) {
        this.regionURL = "https://api.nexmo.com";
        this.provider = "vonage-messaging";
        this.session = session;
        this.vonageAPI = new vonageAPI_js_1.VonageAPI(this.session);
        if (regionURL != null) {
            this.regionURL = regionURL;
        }
    }
    send(message) {
        const url = `${this.regionURL}/v1/messages`;
        const method = "POST";
        return this.vonageAPI.invoke(url, method, message);
    }
    sendText(from, to, message) {
        const payload = new sendTextPayload_js_1.SendTextPayload(from, to, message);
        const url = `${this.regionURL}/v0.1/messages`;
        const method = "POST";
        return this.vonageAPI.invoke(url, method, payload);
    }
    sendImage(from, to, imageContent) {
        const payload = new sendImagePayload_js_1.SendImagePayload(from, to, imageContent);
        const url = `${this.regionURL}/v0.1/messages`;
        const method = "POST";
        return this.vonageAPI.invoke(url, method, payload);
    }
    listenMessages(from, to, callback) {
        const payload = new listenMessagesPayload_js_1.ListenMessagesPayload(from, to, this.session.wrapCallback(callback, []));
        const action = new actionPayload_js_1.ActionPayload(this.provider, messageActions_js_1.MessageActions.SubscribeInboundMessages, payload);
        return new requestInterfaceForCallbacks_js_1.RequestInterfaceForCallbacks(this.session, action);
    }
    listenEvents(from, to, callback) {
        const payload = new listenEventsPayload_js_1.ListenEventsPayload(from, to, this.session.wrapCallback(callback, []));
        const action = new actionPayload_js_1.ActionPayload(this.provider, messageActions_js_1.MessageActions.SubscribeInboundEvents, payload);
        return new requestInterfaceForCallbacks_js_1.RequestInterfaceForCallbacks(this.session, action);
    }
    // v1
    onMessage(callback, from, to) {
        const payload = new listenMessagesPayload_js_1.ListenMessagesPayload(from, to, this.session.wrapCallback(callback, []));
        const action = new actionPayload_js_1.ActionPayload(this.provider, messageActions_js_1.MessageActions.SubscribeInboundMessages, payload);
        return new requestInterfaceForCallbacks_js_1.RequestInterfaceForCallbacks(this.session, action);
    }
    // v1
    onMessageEvents(callback, from, to) {
        const payload = new listenEventsPayload_js_1.ListenEventsPayload(from, to, this.session.wrapCallback(callback, []));
        const action = new actionPayload_js_1.ActionPayload(this.provider, messageActions_js_1.MessageActions.SubscribeInboundEvents, payload);
        return new requestInterfaceForCallbacks_js_1.RequestInterfaceForCallbacks(this.session, action);
    }
    unsubscribeEvents(id) {
        const payload = new unsubscribeEventsPayload_js_1.UnsubscribeEventsPayload(id);
        const action = new actionPayload_js_1.ActionPayload(this.provider, messageActions_js_1.MessageActions.UnsubscribeEvents, payload);
        return new requestInterface_js_1.RequestInterface(this.session, action);
    }
}
exports.Messages = Messages;
//# sourceMappingURL=messages.js.map