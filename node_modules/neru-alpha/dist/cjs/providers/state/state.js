"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.State = void 0;
const stateCommand_js_1 = require("./stateCommand.js");
const stateOperations_js_1 = require("./stateOperations.js");
const requestMethods_js_1 = require("../../request/requestMethods.js");
/**
 * Represents a state object that can be used to store and retrieve data.
 * @class
 */
class State {
    /**
     * Creates a new State.
     * @constructor
     * @param {ISession} session - The session for the state object.
     * @param {string} namespace - The namespace for the state object.
     */
    constructor(session, namespace = null) {
        /**
         * The provider for the state object.
         */
        this.provider = "client-persistence-api";
        this.bridge = session.bridge;
        this.url = session.config.getExecutionUrl(this.provider);
        if (namespace == null) {
            this.namespace = `state:${session.id}`;
        }
        else {
            this.namespace = namespace;
        }
        this.session = session;
        this.commandService = session.commandService;
    }
    /**
     * Creates a new state command.
     * @param {string} op - The operation for the command.
     * @param {string} key - The key for the command.
     * @param {string[]} args - The arguments for the command.
     * @returns {StateCommand} The new state command.
     */
    createCommand(op, key, args) {
        return new stateCommand_js_1.StateCommand(op, this.namespace, key, args);
    }
    /**
     * Executes a state command.
     * @param {IStateCommand} command - The state command to execute.
     * @returns {Promise<T>} The result of the command.
     */
    executeCommand(command) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.commandService.executeCommand(this.url, requestMethods_js_1.RequestMethods.POST, command, this.session.constructRequestHeaders());
        });
    }
    /**
     * Sets the value for a key in the state object.
     * @param {string} key - The key to set.
     * @param {T} value - The value to set for the key.
     * @returns {Promise<string>} A promise that resolves to "OK" if the operation was successful.
     */
    set(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            payload.push(this.bridge.jsonStringify(value));
            const command = this.createCommand(stateOperations_js_1.StateOperations.SET, key, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Retrieves the value for a key in the state object.
     * @param {string} key - The key to retrieve.
     * @returns {Promise<T>} A promise that resolves to the value for the key.
     */
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.GET, key, payload);
            const result = yield this.executeCommand(command);
            if (result != null && result != "") {
                return this.bridge.jsonParse(result);
            }
            return null;
        });
    }
    /**
     * Deletes a key from the state object.
     * @param {string} key - The key to delete.
     * @returns {Promise<string>} A promise that resolves to "1" if the key was deleted, or "0" if the key did not exist.
     */
    delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.DEL, key, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Deletes a key from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string} key - The key to delete from the hash table.
     * @returns {Promise<string>} A promise that resolves to "1" if the key was deleted, or "0" if the key did not exist.
     */
    hdel(htable, keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = keys;
            const command = this.createCommand(stateOperations_js_1.StateOperations.HDEL, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Determines whether a key exists in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string} key - The key to check for in the hash table.
     * @returns {Promise<string>} A promise that resolves to "1" if the key exists, or "0" if the key does not exist.
     */
    hexists(htable, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [key];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HEXISTS, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Retrieves all keys and values from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @returns {Promise<Record<string, string>>} A promise that resolves to an object containing the keys and values from the hash table.
     */
    hgetall(htable) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HGETALL, htable, payload);
            const response = yield this.executeCommand(command);
            const result = {};
            for (let i = 0; i < response.length; i += 2) {
                result[response[i]] = response[i + 1];
            }
            return result;
        });
    }
    /**
     * Retrieves multiple values from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string[]} keys - The keys to retrieve from the hash table.
     * @returns {Promise<string[]>} A promise that resolves to an array of values for the specified keys.
     */
    hmget(htable, keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const command = this.createCommand(stateOperations_js_1.StateOperations.HMGET, htable, keys);
            const response = yield this.executeCommand(command);
            const result = [];
            for (let i = 0; i < response.length; i++) {
                result.push(response[i]);
            }
            return result;
        });
    }
    /**
     * Retrieves all values from a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @returns {Promise<string[]>} A promise that resolves to an array of values from the hash table.
     */
    hvals(htable) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HVALS, htable, payload);
            const response = yield this.executeCommand(command);
            const result = [];
            for (let i = 0; i < response.length; i++) {
                result.push(response[i]);
            }
            return result;
        });
    }
    /**
     * Retrieves the value for a key in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {string} key - The key to retrieve from the hash table.
     * @returns {Promise<string>} A promise that resolves to the value for the key in the hash table.
     */
    hget(htable, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [key];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HGET, htable, payload);
            const result = yield this.executeCommand(command);
            return result;
        });
    }
    /**
     * Sets multiple key-value pairs in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @param {Record<string, string>} keyValuePairs - An object containing the key-value pairs to set in the hash table.
     * @returns {Promise<string>} A promise that resolves to the number of fields that were added.
     */
    hset(htable, keyValuePairs) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const keys = this.bridge.getObjectKeys(keyValuePairs);
            for (let i = 0; i < keys.length; i++) {
                payload.push(keys[i]);
                payload.push(keyValuePairs[keys[i]]);
            }
            const command = this.createCommand(stateOperations_js_1.StateOperations.HSET, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Increments the value for a key in a hash table in the state object.
     * @param {string} htable The name of the hash table.
     * @param {string} key The key to increment.
     * @param {number} value The amount to increment the key by.
     * @returns {Promise<string>} A promise that resolves to the new value for the key.
     */
    hincrby(htable, key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [key, this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HINCRBY, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Retrieves the number of key-value pairs in a hash table in the state object.
     * @param {string} htable - The name of the hash table.
     * @returns {Promise<string>} A promise that resolves to the number of key-value pairs in the hash table.
     */
    hlen(htable) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HLEN, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    hscan(htable, cursor, pattern, count) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [cursor, "MATCH", pattern, "COUNT", this.bridge.jsonStringify(count)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.HSCAN, htable, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Adds a value to the end of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {T} value - The value to add to the list.
     * @returns {Promise<string>} A promise that resolves to the new length of the list.
     */
    rpush(list, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.RPUSH, list, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Removes and retrieves one or more values from the end of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} count - The number of values to remove and retrieve from the end of the list.
     * @returns {Promise<T[]>} A promise that resolves to an array of values removed from the end of the list.
     */
    rpop(list, count = 1) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(count)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.RPOP, list, args); // removes and returns elements from the end of a list
            const response = yield this.executeCommand(command);
            const result = this.parseResponse(response);
            return result;
        });
    }
    /**
     * Adds a value to the beginning of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {T} value - The value to add to the list.
     * @returns {Promise<string>} A promise that resolves to the new length of the list.
     */
    lpush(list, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LPUSH, list, payload);
            return yield this.executeCommand(command); // returns the array length  e.g. "1"
        });
    }
    /**
     * Removes and retrieves one or more values from the beginning of a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} count - The number of values to remove and retrieve from the beginning of the list. Default is 1.
     * @returns {Promise<T[]>} A promise that resolves to an array of values removed from the beginning of the list.
     */
    lpop(list, count = 1) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(count)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LPOP, list, args); // removes and returns elements from the start of a list
            const response = yield this.executeCommand(command);
            const result = this.parseResponse(response);
            return result;
        });
    }
    /**
     * Removes one or more occurrences of a value from a list in the state object.
     * @param {string} list - The name of the list.
     * @param {T} value - The value to remove from the list.
     * @param {number} count - The number of occurrences to remove. A positive number removes the first `count` occurrences, a negative number removes the last `count` occurrences, and a value of 0 removes all occurrences.
     * @returns {Promise<string>} A promise that resolves to the number of occurrences removed from the list.
     */
    lrem(list, value, count = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(count), this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LREM, list, args);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Retrieves the length of a list in the state object.
     * @param {string} list - The name of the list.
     * @returns {Promise<string>} A promise that resolves to the length of the list.
     */
    llen(list) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = [];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LLEN, list, payload);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Retrieves a range of values from a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} startPos - The starting position of the range.
     * @param {number} endPos - The ending position of the range.
     * @returns {Promise<T[]>} A promise that resolves to an array of values from the specified range in the list.
     */
    lrange(list, startPos = 0, endPos = -1) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(startPos), this.bridge.jsonStringify(endPos)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LRANGE, list, args);
            const response = yield this.executeCommand(command);
            const result = this.parseResponse(response);
            return result;
        });
    }
    /**
     * Trims a list in the state object to contain only the specified range of values.
     * @param {string} list - The name of the list.
     * @param {number} startPos - The starting position of the range.
     * @param {number} endPos - The ending position of the range.
     * @returns {Promise<string>} A promise that resolves to "OK" if the operation was successful.
     */
    ltrim(list, startPos, endPos) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(startPos), this.bridge.jsonStringify(endPos)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LTRIM, list, args);
            const response = yield this.executeCommand(command);
            return response;
        });
    }
    /**
     * Inserts a value into a list in the state object either before or after a pivot value.
     * @param {string} list - The name of the list.
     * @param {boolean} before - If `true`, the value is inserted before the pivot value. If `false`, the value is inserted after the pivot value.
     * @param {T} pivot - The pivot value.
     * @param {T} value - The value to insert into the list.
     * @returns {Promise<string>} A promise that resolves to the new length of the list if the operation was successful.
     */
    linsert(list, before, pivot, value) {
        return __awaiter(this, void 0, void 0, function* () {
            let direction = "AFTER";
            if (before == true) {
                direction = "BEFORE";
            }
            const args = [direction, this.bridge.jsonStringify(pivot), this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LINSERT, list, args);
            const response = yield this.executeCommand(command);
            return response;
        });
    }
    /**
     * Retrieves the value at a specific position in a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} position - The position of the value to retrieve.
     * @returns {Promise<T>} A promise that resolves to the value at the specified position in the list.
     */
    lindex(list, position) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(position)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LINDEX, list, args);
            const response = yield this.executeCommand(command);
            return this.bridge.jsonParse(response);
        });
    }
    /**
     * Sets the value at a specific position in a list in the state object.
     * @param {string} list - The name of the list.
     * @param {number} position - The position of the value to set.
     * @param {T} value - The value to set at the specified position in the list.
     * @returns {Promise<string>} A promise that resolves to "OK" if the operation was successful.
     */
    lset(list, position, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(position), this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.LSET, list, args);
            return yield this.executeCommand(command);
        });
    }
    /**
     * Increments the value of a key in the state object by a specified amount.
     * @param {string} key - The key to increment.
     * @param {number} value - The amount to increment the key by.
     * @returns {Promise<string>} A promise that resolves to the new value of the key.
     */
    incrby(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.INCRBY, key, args);
            const response = yield this.executeCommand(command);
            return this.bridge.jsonParse(response);
        });
    }
    /**
     * Decrements the value of a key in the state object by a specified amount.
     * @param {string} key - The key to decrement.
     * @param {number} value - The amount to decrement the key by.
     * @returns {Promise<string>} A promise that resolves to the new value of the key.
     */
    decrby(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(value)];
            const command = this.createCommand(stateOperations_js_1.StateOperations.DECRBY, key, args);
            const response = yield this.executeCommand(command);
            return this.bridge.jsonParse(response);
        });
    }
    /**
     * Sets an expiration time for a key in the state object.
     * @param {string} key - The key to set the expiration time for.
     * @param {number} seconds - The number of seconds after which the key will expire.
     * @param {ExpireOptions} [option] - An optional object specifying additional options for the operation.
     * @returns {Promise<string>} A promise that resolves to "1" if the operation was successful, or "0" if the key does not exist.
     */
    expire(key, seconds, option) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [this.bridge.jsonStringify(seconds)];
            if (option != null) {
                args.push(option);
            }
            const command = this.createCommand(stateOperations_js_1.StateOperations.EXPIRE, key, args);
            return yield this.executeCommand(command);
        });
    }
    parseResponse(response) {
        const result = [];
        if (response != null) {
            for (let i = 0; i < response.length; i++) {
                result.push(this.bridge.jsonParse(response[i]));
            }
        }
        return result;
    }
}
exports.State = State;
//# sourceMappingURL=state.js.map