import { IBridge } from "../../IBridge.js";
import { IConfig } from "../../services/config/IConfig.js";
import { ISession } from "../../session/ISession.js";
import { ICreateQueueOptions } from "./contracts/ICreateQueueOptions.js";
import { RequestInterfaceWithParams } from "../../session/requestInterfaceWithParams.js";
import { ICreateQueuePayload } from "./contracts/ICreateQueuePayload.js";
import { QueueDetailsResponse } from "./contracts/queueDetailsResponse.js";
import { IUpdateQueueOptions } from "./contracts/IUpdateQueueOptions.js";
import { IUpdateQueuePayload } from "./contracts/IUpdateQueuePayload.js";
export interface IQueue {
    config: IConfig;
    provider: string;
    session: ISession;
    bridge: IBridge;
    createQueue(queueName: string, callback: string, options: ICreateQueueOptions): RequestInterfaceWithParams<ICreateQueuePayload, null>;
    updateQueue(queueName: string, options: IUpdateQueueOptions): RequestInterfaceWithParams<IUpdateQueuePayload, null>;
    list(): RequestInterfaceWithParams<null, string[]>;
    getQueueDetails(name: string): RequestInterfaceWithParams<null, QueueDetailsResponse>;
    deleteQueue(name: string): RequestInterfaceWithParams<null, void>;
    pauseQueue(name: string): RequestInterfaceWithParams<null, void>;
    resumeQueue(name: string): RequestInterfaceWithParams<null, void>;
    enqueue<T>(name: string, data: T[]): RequestInterfaceWithParams<T[], void>;
    enqueueSingle<T>(name: string, data: T): RequestInterfaceWithParams<T[], void>;
    deadLetterList(name: string): RequestInterfaceWithParams<null, string[]>;
    deadLetterDequeue<T>(name: string, count: number): RequestInterfaceWithParams<null, T>;
}
//# sourceMappingURL=IQueue.d.ts.map