"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const createQueuePayload_js_1 = require("./contracts/createQueuePayload.js");
const queueRate_js_1 = require("./contracts/queueRate.js");
const requestParams_js_1 = require("../../request/requestParams.js");
const requestMethods_js_1 = require("../../request/requestMethods.js");
const requestInterfaceWithParams_js_1 = require("../../session/requestInterfaceWithParams.js");
const updateQueuePayload_js_1 = require("./contracts/updateQueuePayload.js");
class Queue {
    constructor(session) {
        this.provider = "queue-service";
        this.session = session;
        this.bridge = session.bridge;
        this.config = session.config;
    }
    createQueue(name, callback, options) {
        const payload = new createQueuePayload_js_1.CreateQueuePayload();
        payload.name = name;
        payload.callback = this.session.wrapCallback(callback, []);
        payload.active = options.active;
        payload.rate = new queueRate_js_1.QueueRate();
        payload.rate.maxInflight = options.maxInflight;
        payload.rate.msgPerSecond = options.msgPerSecond;
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.POST;
        requestParams.data = payload;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue");
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    updateQueue(queueName, options) {
        const payload = new updateQueuePayload_js_1.UpdateQueuePayload();
        payload.rate = new queueRate_js_1.QueueRate();
        payload.rate.maxInflight = options.maxInflight;
        payload.rate.msgPerSecond = options.msgPerSecond;
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.POST;
        requestParams.data = payload;
        requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${queueName}`);
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    list() {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.GET;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, "queue");
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    getQueueDetails(name) {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.GET;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}`);
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    deleteQueue(name) {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.DEL;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}`);
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    pauseQueue(name) {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.PUT;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}/pause`);
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    resumeQueue(name) {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.PUT;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}/resume`);
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    enqueue(name, data) {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.POST;
        requestParams.data = data;
        requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}/enqueue`);
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    enqueueSingle(name, data) {
        return this.enqueue(name, [data]);
    }
    deadLetterList(name) {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.GET;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}/deadletter`);
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    deadLetterDequeue(name, count = 1) {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.POST;
        requestParams.data = null;
        requestParams.url = this.config.getExecutionUrl(this.provider, `queue/${name}/deadletter/pop`, { count: this.bridge.jsonStringify(count) });
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
}
exports.Queue = Queue;
//# sourceMappingURL=queue.js.map