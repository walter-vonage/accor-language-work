"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Numbers = void 0;
const vonageAPI_js_1 = require("../vonageAPI/vonageAPI.js");
class Numbers {
    constructor(session) {
        this.session = session;
        this.bridge = session.bridge;
        this.vonageAPI = new vonageAPI_js_1.VonageAPI(this.session);
        this.baseUrl = 'https://rest.nexmo.com/number';
        this.accountUrl = 'https://rest.nexmo.com/account/numbers';
    }
    getNumbers(apiKey, apiSecret, getNumberOptions) {
        let url = `${this.accountUrl}?api_key=${apiKey}&api_secret=${apiSecret}`;
        const options = {};
        if (getNumberOptions.application_id != null) {
            options.application_id = getNumberOptions.application_id;
        }
        if (getNumberOptions.has_application != null) {
            options.has_application = getNumberOptions.has_application;
        }
        if (getNumberOptions.country != null) {
            options.country = getNumberOptions.country;
        }
        if (getNumberOptions.pattern != null) {
            options.pattern = getNumberOptions.pattern;
        }
        if (getNumberOptions.search_pattern != null) {
            options.search_pattern = getNumberOptions.search_pattern;
        }
        if (getNumberOptions.size != null) {
            options.size = getNumberOptions.size;
        }
        if (getNumberOptions.index != null) {
            options.index = getNumberOptions.index;
        }
        url = this.buildUrl(url, options);
        const method = 'GET';
        return this.vonageAPI.invoke(url, method, null);
    }
    searchNumbers(apiKey, apiSecret, searchNumberOptions) {
        let url = `${this.baseUrl}/search?api_key=${apiKey}&api_secret=${apiSecret}`;
        const options = {};
        if (searchNumberOptions.country != null) {
            options.country = searchNumberOptions.country;
        }
        if (searchNumberOptions.type != null) {
            options.type = searchNumberOptions.type;
        }
        if (searchNumberOptions.pattern != null) {
            options.pattern = searchNumberOptions.pattern;
        }
        if (searchNumberOptions.search_pattern != null) {
            options.search_pattern = searchNumberOptions.search_pattern;
        }
        if (searchNumberOptions.features != null) {
            options.features = searchNumberOptions.features;
        }
        if (searchNumberOptions.size != null) {
            options.size = searchNumberOptions.size;
        }
        if (searchNumberOptions.index != null) {
            options.index = searchNumberOptions.index;
        }
        url = this.buildUrl(url, options);
        const method = 'GET';
        return this.vonageAPI.invoke(url, method, null);
    }
    buyNumber(apiKey, apiSecret, numberOptions) {
        let url = `${this.baseUrl}/buy?api_key=${apiKey}&api_secret=${apiSecret}`;
        const options = {};
        if (numberOptions.country != null) {
            options.country = numberOptions.country;
        }
        if (numberOptions.msisdn != null) {
            options.msisdn = numberOptions.msisdn;
        }
        if (numberOptions.target_api_key != null) {
            options.target_api_key = numberOptions.target_api_key;
        }
        url = this.buildUrl(url, options);
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, null);
    }
    cancelNumber(apiKey, apiSecret, numberOptions) {
        let url = `${this.baseUrl}/cancel?api_key=${apiKey}&api_secret=${apiSecret}`;
        const options = {};
        if (numberOptions.country != null) {
            options.country = numberOptions.country;
        }
        if (numberOptions.msisdn != null) {
            options.msisdn = numberOptions.msisdn;
        }
        if (numberOptions.target_api_key != null) {
            options.target_api_key = numberOptions.target_api_key;
        }
        url = this.buildUrl(url, options);
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, null);
    }
    updateNumber(apiKey, apiSecret, updateNumberOptions) {
        let url = `${this.baseUrl}/update?api_key=${apiKey}&api_secret=${apiSecret}`;
        const options = {};
        if (updateNumberOptions.country != null) {
            options.country = updateNumberOptions.country;
        }
        if (updateNumberOptions.msisdn != null) {
            options.msisdn = updateNumberOptions.msisdn;
        }
        if (updateNumberOptions.app_id != null) {
            options.app_id = updateNumberOptions.app_id;
        }
        if (updateNumberOptions.moHttpUrl != null) {
            options.moHttpUrl = updateNumberOptions.moHttpUrl;
        }
        if (updateNumberOptions.moSmppSysType != null) {
            options.moSmppSysType = updateNumberOptions.moSmppSysType;
        }
        if (updateNumberOptions.voiceCallbackType != null) {
            options.voiceCallbackType = updateNumberOptions.voiceCallbackType;
        }
        if (updateNumberOptions.voiceCallbackValue != null) {
            options.voiceCallbackValue = updateNumberOptions.voiceCallbackValue;
        }
        if (updateNumberOptions.voiceStatusCallback != null) {
            options.voiceStatusCallback = updateNumberOptions.voiceStatusCallback;
        }
        url = this.buildUrl(url, options);
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, null);
    }
    buildUrl(baseUrl, options) {
        const keys = this.bridge.getObjectKeys(options);
        let queryString = '';
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const value = options[key];
            queryString += `${key}=${value}`;
            if (i + 1 < keys.length) {
                queryString += '&';
            }
        }
        if (queryString.length > 0) {
            return `${baseUrl}?${queryString}`;
        }
        return baseUrl;
    }
}
exports.Numbers = Numbers;
//# sourceMappingURL=numbers.js.map