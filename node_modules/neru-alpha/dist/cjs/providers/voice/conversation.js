"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Conversation = void 0;
const csEvents_js_1 = require("./csEvents.js");
const voiceActions_js_1 = require("./voiceActions.js");
const vonageAPI_js_1 = require("../vonageAPI/vonageAPI.js");
const filter_js_1 = require("../../session/filter.js");
const actionPayload_js_1 = require("../../session/actionPayload.js");
const requestInterfaceForCallbacks_js_1 = require("../../session/requestInterfaceForCallbacks.js");
const transferMemberPayload_js_1 = require("./contracts/transferMemberPayload.js");
const sayStopPayload_js_1 = require("./contracts/sayStopPayload.js");
const playStreamPayload_js_1 = require("./contracts/playStreamPayload.js");
const playStopPayload_js_1 = require("./contracts/playStopPayload.js");
const reason_js_1 = require("./contracts/reason.js");
const deleteMemberPayload_js_1 = require("./contracts/deleteMemberPayload.js");
const sayTextPayload_js_1 = require("./contracts/sayTextPayload.js");
const earmuffPayload_js_1 = require("./contracts/earmuffPayload.js");
const audioSettings_js_1 = require("./contracts/audioSettings.js");
const media_js_1 = require("./contracts/media.js");
const channel_js_1 = require("./contracts/channel.js");
const acceptInboundCallPayload_js_1 = require("./contracts/acceptInboundCallPayload.js");
const inviteMemberPayload_js_1 = require("./contracts/inviteMemberPayload.js");
const mutePayload_js_1 = require("./contracts/mutePayload.js");
const conversationPayloadWithCallback_js_1 = require("./contracts/conversationPayloadWithCallback.js");
const addUserPayload_js_1 = require("./contracts/addUserPayload.js");
class Conversation {
    constructor(id, session) {
        this.provider = 'vonage-voice';
        this.id = id;
        this.session = session;
        this.vonageAPI = new vonageAPI_js_1.VonageAPI(this.session);
        this.baseUrl = 'https://api.nexmo.com/v0.3';
    }
    acceptInboundCall(event) {
        const audioSettings = new audioSettings_js_1.AudioSettings(true, false, false);
        const media = new media_js_1.Media(audioSettings, true);
        const channel = new channel_js_1.Channel();
        channel.id = event.body.channel.id;
        channel.type = event.body.channel.type;
        channel.to = event.body.channel.to;
        channel.from = event.body.channel.from;
        const payload = new acceptInboundCallPayload_js_1.AcceptInboundCallPayload(event.body.user.id, event.from, channel, media);
        const url = `${this.baseUrl}/conversations/${this.id}/members`;
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    }
    inviteMember(name, channel) {
        const payload = new inviteMemberPayload_js_1.InviteMemberPayload(name, channel);
        const url = `${this.baseUrl}/conversations/${this.id}/members`;
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    }
    addUser(name) {
        const payload = new addUserPayload_js_1.AddUserPayload(name);
        const url = `${this.baseUrl}/users`;
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    }
    transferMember(userId, legId) {
        const payload = new transferMemberPayload_js_1.TransferMemberPayload(userId, legId);
        const url = `${this.baseUrl}/conversations/${this.id}/members`;
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    }
    deleteMember(memberId) {
        //TODO: magic numbers
        const reason = new reason_js_1.Reason('123', 'leaving conversation');
        const payload = new deleteMemberPayload_js_1.DeleteMemberPayload(reason);
        const url = `${this.baseUrl}/conversations/${this.id}/members/${memberId}`;
        const method = `PATCH`;
        return this.vonageAPI.invoke(url, method, payload);
    }
    sayText(body, to = null) {
        if (body.level == null) {
            body.level = 1;
        }
        if (body.loop == null) {
            body.loop = 1;
        }
        if (body.voice_name == null) {
            body.voice_name = 'Amy';
        }
        if (body.queue == null) {
            body.queue = false;
        }
        if (body.ssml == null) {
            body.ssml = false;
        }
        const payload = new sayTextPayload_js_1.SayTextPayload(body, to);
        const method = 'POST';
        const url = `${this.baseUrl}/conversations/${this.id}/events`;
        return this.vonageAPI.invoke(url, method, payload);
    }
    sayStop(sayId, to = null) {
        const payload = new sayStopPayload_js_1.SayStopPayload(sayId, to);
        const url = `${this.baseUrl}/conversations/${this.id}/events`;
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    }
    playStream(body, to = null) {
        if (body.loop == null) {
            body.loop = 1;
        }
        if (body.level == null) {
            body.level = 1;
        }
        const payload = new playStreamPayload_js_1.PlayStreamPayload(body, to);
        const url = `${this.baseUrl}/conversations/${this.id}/events`;
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    }
    playStop(playId, to = null) {
        const payload = new playStopPayload_js_1.PlayStopPayload(playId, to);
        const url = `${this.baseUrl}/conversations/${this.id}/events`;
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    }
    earmuff(enable, to, from = null) {
        const payload = new earmuffPayload_js_1.EarmuffPayload(enable, to, from);
        const url = `${this.baseUrl}/conversations/${this.id}/events`;
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    }
    earmuffOn(to, from = null) {
        return this.earmuff(true, to, from);
    }
    earmuffOff(to, from = null) {
        return this.earmuff(false, to, from);
    }
    mute(enable, to, from = null) {
        const payload = new mutePayload_js_1.MutePayload(enable, to, from);
        const url = `${this.baseUrl}/conversations/${this.id}/events`;
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, payload);
    }
    muteOn(to, from = null) {
        return this.mute(true, to, from);
    }
    muteOff(to, from = null) {
        return this.mute(false, to, from);
    }
    listenForEvents(callback, filters) {
        const payload = new conversationPayloadWithCallback_js_1.ConversationPayloadWithCallback(this.session.wrapCallback(callback, filters), this.id);
        const action = new actionPayload_js_1.ActionPayload(this.provider, voiceActions_js_1.VoiceActions.ConversationSubscribeEvent, payload);
        return new requestInterfaceForCallbacks_js_1.RequestInterfaceForCallbacks(this.session, action);
    }
    onConversationCreated(callback) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.ConversationCreated]),
            new filter_js_1.Filter('body.name', 'contains', [this.name]),
        ];
        return this.listenForEvents(callback, filters);
    }
    onSay(callback) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.AudioSay]),
            new filter_js_1.Filter(`conversation_id`, `contains`, [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    }
    onPlay(callback) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.AudioPlay]),
            new filter_js_1.Filter('conversation_id', 'contains', [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    }
    onSayStop(callback) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.AudioSayStop]),
            new filter_js_1.Filter(`conversation_id`, `contains`, [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    }
    onPlayStop(callback) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.AudioPlayStop]),
            new filter_js_1.Filter(`conversation_id`, `contains`, [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    }
    onSayDone(callback) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.AudioSayDone]),
            new filter_js_1.Filter(`conversation_id`, `contains`, [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    }
    onPlayDone(callback) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.AudioPlayDone]),
            new filter_js_1.Filter(`conversation_id`, `contains`, [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    }
    onLegStatusUpdate(callback) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.LegStatusUpdate]),
            new filter_js_1.Filter(`conversation_id`, `contains`, [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    }
    onMemberJoined(callback, memberName = null) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.MemberJoined]),
            new filter_js_1.Filter(`conversation_id`, `contains`, [this.id]),
        ];
        if (memberName != null) {
            filters.push(new filter_js_1.Filter(`body.user.name`, `contains`, [memberName]));
        }
        return this.listenForEvents(callback, filters);
    }
    onMemberInvited(callback, memberName = null) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.MemberInvited]),
            new filter_js_1.Filter(`conversation_id`, `contains`, [this.id]),
        ];
        if (memberName != null) {
            filters.push(new filter_js_1.Filter('body.user.name', 'contains', [memberName]));
        }
        return this.listenForEvents(callback, filters);
    }
    onMemberLeft(callback, memberName = null) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.MemberLeft]),
            new filter_js_1.Filter(`conversation_id`, `contains`, [this.id]),
        ];
        if (memberName != null) {
            filters.push(new filter_js_1.Filter('body.user.name', 'contains', [memberName]));
        }
        return this.listenForEvents(callback, filters);
    }
    onDTMF(callback) {
        const filters = [
            new filter_js_1.Filter('type', 'contains', [csEvents_js_1.CSEvents.AudioDTMF]),
            new filter_js_1.Filter(`conversation_id`, `contains`, [this.id]),
        ];
        return this.listenForEvents(callback, filters);
    }
}
exports.Conversation = Conversation;
//# sourceMappingURL=conversation.js.map