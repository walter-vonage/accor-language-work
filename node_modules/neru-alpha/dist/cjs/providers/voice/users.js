"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Users = void 0;
const vonageAPI_js_1 = require("../vonageAPI/vonageAPI.js");
class Users {
    constructor(session) {
        this.session = session;
        this.bridge = session.bridge;
        this.vonageAPI = new vonageAPI_js_1.VonageAPI(this.session);
        this.baseUrl = 'https://api.nexmo.com/v0.3';
    }
    getUsers(page_size, order, pageUrl) {
        let url = '';
        if (pageUrl != null) {
            url = pageUrl;
        }
        else {
            const options = {};
            if (page_size) {
                options.page_size = page_size;
            }
            if (order) {
                options.order = order;
            }
            url = this.buildUrl(`${this.baseUrl}/users`, options);
        }
        const method = 'GET';
        return this.vonageAPI.invoke(url, method, null);
    }
    getUser(user_id) {
        const url = `${this.baseUrl}/users/${user_id}`;
        const method = 'GET';
        return this.vonageAPI.invoke(url, method, null);
    }
    createUser(createUserPayload) {
        const url = `${this.baseUrl}/users`;
        const method = 'POST';
        return this.vonageAPI.invoke(url, method, createUserPayload);
    }
    updateUser(user_id, updateUserPayload) {
        const url = `${this.baseUrl}/users/${user_id}`;
        const method = 'PATCH';
        return this.vonageAPI.invoke(url, method, updateUserPayload);
    }
    deleteUser(user_id) {
        const url = `${this.baseUrl}/users/${user_id}`;
        const method = 'DELETE';
        return this.vonageAPI.invoke(url, method, null);
    }
    buildUrl(baseUrl, options) {
        const keys = this.bridge.getObjectKeys(options);
        let queryString = '';
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const value = options[key];
            queryString += `${key}=${value}`;
            if (i + 1 < keys.length) {
                queryString += '&';
            }
        }
        if (queryString.length > 0) {
            return `${baseUrl}?${queryString}`;
        }
        return baseUrl;
    }
}
exports.Users = Users;
//# sourceMappingURL=users.js.map