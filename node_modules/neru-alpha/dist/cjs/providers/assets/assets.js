"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Assets = void 0;
const directoryPayload_js_1 = require("./contracts/directoryPayload.js");
const removeAssetPayload_js_1 = require("./contracts/removeAssetPayload.js");
const listAssetsPayload_js_1 = require("./contracts/listAssetsPayload.js");
const assetsActions_js_1 = require("./assetsActions.js");
const requestMethods_js_1 = require("../../request/requestMethods.js");
const requestInterfaceWithParams_js_1 = require("../../session/requestInterfaceWithParams.js");
const requestParams_js_1 = require("../../request/requestParams.js");
const linkPayload_js_1 = require("./contracts/linkPayload.js");
const formDataObject_js_1 = require("../../request/formDataObject.js");
class Assets {
    constructor(session) {
        this.provider = "vonage-assets";
        this.session = session;
        this.bridge = session.bridge;
        this.config = session.config;
    }
    createDir(name) {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.POST;
        requestParams.data = new directoryPayload_js_1.DirectoryPayload(name);
        requestParams.url = this.config.getExecutionUrl(this.provider, assetsActions_js_1.AssetsActions.Mkdir);
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    remove(remoteFilePath, recursive = false) {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.POST;
        requestParams.data = new removeAssetPayload_js_1.RemoveAssetPayload(remoteFilePath, recursive);
        requestParams.url = this.config.getExecutionUrl(this.provider, assetsActions_js_1.AssetsActions.Remove);
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    getRemoteFile(remoteFilePath) {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.GET;
        requestParams.url = this.config.getExecutionUrl(this.provider, assetsActions_js_1.AssetsActions.Binary, { key: remoteFilePath });
        requestParams.headers = this.session.constructRequestHeaders();
        requestParams.responseType = "stream" /* ResponseTypes.STREAM */;
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    generateLink(remoteFilePath, duration = "5m") {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.POST;
        requestParams.data = new linkPayload_js_1.LinkPayload(remoteFilePath, duration);
        requestParams.url = this.config.getExecutionUrl(this.provider, assetsActions_js_1.AssetsActions.Link);
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    uploadFiles(localFilePaths, remoteDir, retentionPeriod) {
        const streams = [];
        for (let i = 0; i < localFilePaths.length; i++) {
            streams.push(this.bridge.createReadStream(localFilePaths[i]));
        }
        return this.uploadData(streams, remoteDir, null, retentionPeriod);
    }
    uploadData(data, remoteDir, filenames, retentionPeriod) {
        const url = this.config.getExecutionUrl(this.provider, assetsActions_js_1.AssetsActions.Copy, {
            dst: remoteDir,
            retention: retentionPeriod,
        });
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.POST;
        requestParams.data = [];
        for (let i = 0; i < data.length; i++) {
            const formData = new formDataObject_js_1.FormDataObject();
            formData.name = `file[${i}]`;
            formData.value = data[i];
            if (filenames != null && filenames[i] != null) {
                formData.filename = filenames[i];
            }
            requestParams.data.push(formData);
        }
        requestParams.url = url;
        requestParams.headers = this.session.constructRequestHeaders();
        requestParams.headers["Content-Type"] = "multipart/form-data";
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
    list(remotePath, recursive = false, limit = 1000) {
        const requestParams = new requestParams_js_1.RequestParams();
        requestParams.method = requestMethods_js_1.RequestMethods.POST;
        requestParams.data = new listAssetsPayload_js_1.ListAssetsPayload(remotePath, recursive, limit);
        requestParams.url = this.config.getExecutionUrl(this.provider, assetsActions_js_1.AssetsActions.List);
        requestParams.headers = this.session.constructRequestHeaders();
        return new requestInterfaceWithParams_js_1.RequestInterfaceWithParams(this.session, requestParams);
    }
}
exports.Assets = Assets;
//# sourceMappingURL=assets.js.map