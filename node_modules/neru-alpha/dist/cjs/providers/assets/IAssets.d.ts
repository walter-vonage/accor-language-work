import { DirectoryPayload } from "./contracts/directoryPayload.js";
import { ListAssetsPayload } from "./contracts/listAssetsPayload.js";
import { RemoveAssetPayload } from "./contracts/removeAssetPayload.js";
import { RequestInterfaceWithParams } from "../../session/requestInterfaceWithParams.js";
import { LinkPayload } from "./contracts/linkPayload.js";
import { AssetLinkResponse } from "./contracts/assetLinkResponse.js";
import { AssetListResponse } from "./contracts/assetListResponse.js";
export interface IAssets {
    createDir(name: string): RequestInterfaceWithParams<DirectoryPayload, null>;
    remove(remoteFilePath: string, recursive: boolean): RequestInterfaceWithParams<RemoveAssetPayload, null>;
    getRemoteFile(remoteFilePath: string): RequestInterfaceWithParams<null, string>;
    generateLink(remoteFilePath: string, duration: string): RequestInterfaceWithParams<LinkPayload, AssetLinkResponse>;
    uploadFiles(localFilePaths: string[], remoteDir: string, retentionPeriod?: string): RequestInterfaceWithParams<Record<string, any>, null>;
    uploadData(data: any[], remoteDir: string, filenames?: string[], retentionPeriod?: string): RequestInterfaceWithParams<Record<string, any>, null>;
    list(remotePath: string, recursive: boolean, limit: number): RequestInterfaceWithParams<ListAssetsPayload, AssetListResponse>;
}
//# sourceMappingURL=IAssets.d.ts.map