"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scheduler = void 0;
const requestInterface_js_1 = require("../../session/requestInterface.js");
const schedulerActions_js_1 = require("./schedulerActions.js");
const actionPayload_js_1 = require("../../session/actionPayload.js");
const startAtPayload_js_1 = require("./contracts/startAtPayload.js");
const schedulerPayload_js_1 = require("./contracts/schedulerPayload.js");
const requestInterfaceForCallbacks_js_1 = require("../../session/requestInterfaceForCallbacks.js");
const listAllPayload_js_1 = require("./contracts/listAllPayload.js");
class Scheduler {
    constructor(session) {
        this.provider = 'vonage-scheduler';
        this.session = session;
        this.bridge = session.bridge;
    }
    startAt(params) {
        if (params.id != null && this.bridge.testRegEx(params.id, '^[a-zA-Z0-9][a-zA-Z0-9-_]*$') != true) {
            throw new Error("Error: The input does not match the required pattern ^[a-zA-Z0-9][a-zA-Z0-9-_]*$. Please enter a string that starts with a letter or a digit, and contains only letters, digits, hyphens, and underscores.");
        }
        const startAtPayload = new startAtPayload_js_1.StartAtPayload();
        startAtPayload.startAt = params.startAt;
        startAtPayload.callback = this.session.wrapCallback(params.callback, []);
        if (params.payload != null) {
            startAtPayload.payload = params.payload;
        }
        if (params.interval != null) {
            startAtPayload.interval = params.interval;
        }
        if (params.id != null) {
            startAtPayload.id = params.id;
        }
        const action = new actionPayload_js_1.ActionPayload(this.provider, schedulerActions_js_1.SchedulerActions.Create, startAtPayload);
        return new requestInterfaceForCallbacks_js_1.RequestInterfaceForCallbacks(this.session, action);
    }
    listAll(size = 10, cursor) {
        const payload = new listAllPayload_js_1.ListAllPayload(size, cursor);
        const action = new actionPayload_js_1.ActionPayload(this.provider, schedulerActions_js_1.SchedulerActions.List, payload);
        return new requestInterface_js_1.RequestInterface(this.session, action);
    }
    get(scheduleId) {
        const payload = new schedulerPayload_js_1.SchedulerPayload(scheduleId);
        const action = new actionPayload_js_1.ActionPayload(this.provider, schedulerActions_js_1.SchedulerActions.Get, payload);
        return new requestInterface_js_1.RequestInterface(this.session, action);
    }
    cancel(scheduleId) {
        const payload = new schedulerPayload_js_1.SchedulerPayload(scheduleId);
        const action = new actionPayload_js_1.ActionPayload(this.provider, schedulerActions_js_1.SchedulerActions.Cancel, payload);
        return new requestInterface_js_1.RequestInterface(this.session, action);
    }
}
exports.Scheduler = Scheduler;
//# sourceMappingURL=scheduler.js.map