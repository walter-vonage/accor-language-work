"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagesSmokeTests = void 0;
const bridge_js_1 = require("../bridge.js");
const messages_js_1 = require("../providers/messages/messages.js");
const messageContact_js_1 = require("../providers/messages/contracts/messageContact.js");
const smsMessage_js_1 = require("../providers/messages/contracts/smsMessage.js");
const requestParams_js_1 = require("../request/requestParams.js");
const requestMethods_js_1 = require("../request/requestMethods.js");
const state_js_1 = require("../providers/state/state.js");
const neru_js_1 = require("../neru.js");
class MessagesSmokeTests {
    constructor() {
        this.healthChecksUrl = "https://hc-ping.com";
        this.bridge = new bridge_js_1.Bridge();
        this.neru = new neru_js_1.Neru();
        this.session = this.neru.createSession();
        this.messages = new messages_js_1.Messages(this.session);
    }
    onMessage(callback, fromNumber, toNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const fromContact = new messageContact_js_1.MessageContact();
            fromContact.type = "sms";
            fromContact.number = fromNumber;
            const toContact = new messageContact_js_1.MessageContact();
            toContact.type = "sms";
            toContact.number = toNumber;
            yield this.messages.onMessage(callback, fromContact, toContact).execute();
        });
    }
    onEvent(callback, fromNumber, toNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const clientContact = new messageContact_js_1.MessageContact();
            clientContact.type = "sms";
            clientContact.number = fromNumber;
            const applicationContact = new messageContact_js_1.MessageContact();
            applicationContact.type = "sms";
            applicationContact.number = toNumber;
            yield this.messages.onMessageEvents(callback, clientContact, applicationContact).execute();
        });
    }
    sendMessage(fromNumber, toNumber, message) {
        return __awaiter(this, void 0, void 0, function* () {
            const smsMessage = new smsMessage_js_1.SMSMessage();
            smsMessage.from = fromNumber;
            smsMessage.to = toNumber;
            smsMessage.text = message;
            yield this.messages.send(smsMessage).execute();
        });
    }
    checkIncomingMessageAndHitHealthEndpointIfSuccess(message, expectedMessage, successPathname) {
        return __awaiter(this, void 0, void 0, function* () {
            if (message == expectedMessage) {
                const requestParams = new requestParams_js_1.RequestParams();
                requestParams.method = requestMethods_js_1.RequestMethods.POST;
                requestParams.url = `${this.healthChecksUrl}/${successPathname}`;
                yield this.bridge.requestWithoutResponse(requestParams);
            }
        });
    }
    checkIncomingEventAndHitHealthEndpointIfSuccess(sessionId, status, successPathname) {
        return __awaiter(this, void 0, void 0, function* () {
            const session = this.neru.getSessionById(sessionId);
            const state = new state_js_1.State(session);
            if (status == "submitted") {
                yield state.incrby("submitted", 1);
            }
            if (status == "delivered") {
                yield state.incrby("delivered", 1);
            }
            const submitted = (yield state.get("submitted")) || 0;
            const delivered = (yield state.get("delivered")) || 0;
            if (submitted && delivered) {
                const requestParams = new requestParams_js_1.RequestParams();
                requestParams.method = requestMethods_js_1.RequestMethods.POST;
                requestParams.url = `${this.healthChecksUrl}/${successPathname}`;
                yield this.bridge.requestWithoutResponse(requestParams);
                yield state.set("events", null);
            }
        });
    }
}
exports.MessagesSmokeTests = MessagesSmokeTests;
//# sourceMappingURL=messagesTest.js.map