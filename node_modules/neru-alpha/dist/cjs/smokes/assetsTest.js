"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetsSmokeTests = void 0;
const bridge_js_1 = require("../bridge.js");
const assets_js_1 = require("../providers/assets/assets.js");
const neru_js_1 = require("../neru.js");
const requestParams_js_1 = require("../request/requestParams.js");
const requestMethods_js_1 = require("../request/requestMethods.js");
class AssetsSmokeTests {
    constructor() {
        this.healthChecksUrl = "https://hc-ping.com";
        this.bridge = new bridge_js_1.Bridge();
        const neru = new neru_js_1.Neru();
        this.session = neru.createSession();
        this.assets = new assets_js_1.Assets(this.session);
    }
    uploadAndGetRemoteFile(filePath, remoteDir, successPathname) {
        return __awaiter(this, void 0, void 0, function* () {
            const files = [filePath];
            yield this.assets.uploadFiles(files, remoteDir).execute();
            const file = yield this.assets.getRemoteFile(remoteDir + "/" + filePath).execute();
            if (file != null) {
                const requestParams = new requestParams_js_1.RequestParams();
                requestParams.method = requestMethods_js_1.RequestMethods.POST;
                requestParams.url = `${this.healthChecksUrl}/${successPathname}`;
                yield this.bridge.requestWithoutResponse(requestParams);
            }
        });
    }
}
exports.AssetsSmokeTests = AssetsSmokeTests;
//# sourceMappingURL=assetsTest.js.map