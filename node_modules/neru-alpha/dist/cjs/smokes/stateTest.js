"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateSmokeTests = void 0;
const bridge_js_1 = require("../bridge.js");
const state_js_1 = require("../providers/state/state.js");
const requestParams_js_1 = require("../request/requestParams.js");
const requestMethods_js_1 = require("../request/requestMethods.js");
const neru_js_1 = require("../neru.js");
class StateSmokeTests {
    constructor() {
        this.healthChecksUrl = "https://hc-ping.com";
        this.bridge = new bridge_js_1.Bridge();
        this.neru = new neru_js_1.Neru();
        this.session = this.neru.createSession();
        this.state = new state_js_1.State(this.session);
    }
    getset(successPathname) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = "test-key";
            const testData = "test-data";
            yield this.state.set(key, testData);
            const receivedData = yield this.state.get(key);
            if (receivedData == testData) {
                const requestParams = new requestParams_js_1.RequestParams();
                requestParams.method = requestMethods_js_1.RequestMethods.POST;
                requestParams.url = `${this.healthChecksUrl}/${successPathname}`;
                yield this.bridge.requestWithoutResponse(requestParams);
            }
        });
    }
    delete(successPathname) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = "test-key";
            const testData = "test-data";
            yield this.state.set(key, testData);
            yield this.state.delete(key);
            const value = yield this.state.get(key);
            if (value == null) {
                const requestParams = new requestParams_js_1.RequestParams();
                requestParams.method = requestMethods_js_1.RequestMethods.POST;
                requestParams.url = `${this.healthChecksUrl}/${successPathname}`;
                yield this.bridge.requestWithoutResponse(requestParams);
            }
        });
    }
}
exports.StateSmokeTests = StateSmokeTests;
//# sourceMappingURL=stateTest.js.map