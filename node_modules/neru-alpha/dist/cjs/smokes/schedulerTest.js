"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchedulerSmokeTests = void 0;
const bridge_js_1 = require("../bridge.js");
const schedulerTestPayload_js_1 = require("./schedulerTestPayload.js");
const scheduler_js_1 = require("../providers/scheduler/scheduler.js");
const startAtParams_js_1 = require("../providers/scheduler/contracts/startAtParams.js");
const intervalParams_js_1 = require("../providers/scheduler/contracts/intervalParams.js");
const untilParams_js_1 = require("../providers/scheduler/contracts/untilParams.js");
const requestParams_js_1 = require("../request/requestParams.js");
const requestMethods_js_1 = require("../request/requestMethods.js");
const state_js_1 = require("../providers/state/state.js");
const neru_js_1 = require("../neru.js");
class SchedulerSmokeTests {
    constructor() {
        this.maxInvocations = 2;
        this.healthChecksUrl = "https://hc-ping.com";
        this.bridge = new bridge_js_1.Bridge();
        this.neru = new neru_js_1.Neru();
        this.session = this.neru.createSession();
        this.scheduler = new scheduler_js_1.Scheduler(this.session);
    }
    scheduleOnce(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = new startAtParams_js_1.StartAtParams();
            params.startAt = this.bridge.isoDate();
            params.callback = callback;
            params.payload = new schedulerTestPayload_js_1.SchedulerTestPayload();
            yield this.scheduler.startAt(params).execute();
        });
    }
    scheduleRecurring(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = new startAtParams_js_1.StartAtParams();
            params.startAt = this.bridge.isoDate();
            params.callback = callback;
            params.payload = new schedulerTestPayload_js_1.SchedulerTestPayload();
            params.interval = new intervalParams_js_1.IntervalParams();
            params.interval.cron = "*/1 * * * *";
            params.interval.until = new untilParams_js_1.UntilParams();
            params.interval.until.maxInvocations = this.maxInvocations;
            params.interval.until.date = this.bridge.toISOString(3 * 60);
            yield this.scheduler.startAt(params).execute();
        });
    }
    onScheduledOnce(payload, successPathname) {
        return __awaiter(this, void 0, void 0, function* () {
            if (payload == "test payload") {
                const requestParams = new requestParams_js_1.RequestParams();
                requestParams.method = requestMethods_js_1.RequestMethods.POST;
                requestParams.url = `${this.healthChecksUrl}/${successPathname}`;
                yield this.bridge.requestWithoutResponse(requestParams);
            }
        });
    }
    onScheduledRecurring(sessionId, successPathname) {
        return __awaiter(this, void 0, void 0, function* () {
            const session = this.neru.getSessionById(sessionId);
            const state = new state_js_1.State(session);
            yield state.incrby("count", 1);
            const count = yield state.get("count");
            if (count == this.maxInvocations) {
                const requestParams = new requestParams_js_1.RequestParams();
                requestParams.method = requestMethods_js_1.RequestMethods.POST;
                requestParams.url = `${this.healthChecksUrl}/${successPathname}`;
                yield this.bridge.requestWithoutResponse(requestParams);
            }
        });
    }
}
exports.SchedulerSmokeTests = SchedulerSmokeTests;
//# sourceMappingURL=schedulerTest.js.map